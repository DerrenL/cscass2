{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar jsSHA = require(\"jssha\");\n\nvar rp = require('request-promise');\n\nvar rp_errors = require('request-promise/errors');\n\nvar api_errors = require('./errors');\n\nvar requests = require('./requests');\n\nvar BATCH_MAX_SIZE = 10000;\n/**\n  * Client for sending requests to Recombee and getting replies\n  */\n\nvar ApiClient = /*#__PURE__*/function () {\n  /**\n   * Construct the client\n   * @param {string} databaseId - ID of your database\n   * @param {string} secretToken - Corresponding secret token\n   * @param {boolean} alwaysUseHttps - If true, all requests are sent using HTTPS (default: true)\n   * @param {Object} options - Other custom options\n   */\n  function ApiClient(databaseId, token, alwaysUseHttps, options) {\n    _classCallCheck(this, ApiClient);\n\n    this.databaseId = databaseId;\n    this.token = token;\n    this.alwaysUseHttps = alwaysUseHttps === undefined ? true : alwaysUseHttps;\n    this.options = options || {};\n    this.baseUri = process.env.RAPI_URI || this.options.baseUri || 'rapi.recombee.com';\n  }\n  /**\n   * Send the request to Recombee\n   * @param {Request} request - Request to be sent\n   * @param {Object} callback - Optional callback (send returns Promise if omitted) \n   */\n\n\n  _createClass(ApiClient, [{\n    key: \"send\",\n    value: function send(request, callback) {\n      if (request instanceof requests.Batch && request.requests.length > BATCH_MAX_SIZE) return this._send_multipart_batch(request);\n\n      var url = this._buildRequestUrl(request);\n\n      var options = {\n        method: request.method,\n        uri: url,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'User-Agent': 'recombee-node-api-client/3.0.0'\n        },\n        timeout: request.timeout,\n        resolveWithFullResponse: true,\n        json: true\n      };\n      if (this.options.proxy) options.proxy = this.options.proxy;\n      if (request.bodyParameters()) options.body = request.bodyParameters();\n      return rp(options).then(this._parseResponse).then(function (response) {\n        return new Promise(function (resolve) {\n          if (callback) {\n            return callback(null, response);\n          }\n\n          return resolve(response);\n        });\n      })[\"catch\"](rp_errors.StatusCodeError, function (error) {\n        throw new api_errors.ResponseError(request, error.statusCode, error.message);\n      })[\"catch\"](rp_errors.RequestError, function (error) {\n        if (error.cause.code === 'ETIMEDOUT' || error.cause.code === 'ESOCKETTIMEDOUT') throw new api_errors.TimeoutError(request, error);\n        throw error;\n      })[\"catch\"](function (error) {\n        if (callback) {\n          return callback(error);\n        }\n\n        ;\n        throw error;\n      });\n    }\n  }, {\n    key: \"_buildRequestUrl\",\n    value: function _buildRequestUrl(request) {\n      var protocol = request.ensureHttps || this.alwaysUseHttps ? 'https' : 'http';\n\n      var reqUrl = request.path + this._encodeRequestQueryParams(request);\n\n      var signedUrl = this._signUrl(reqUrl);\n\n      return protocol + '://' + this.baseUri + signedUrl;\n    }\n  }, {\n    key: \"_encodeRequestQueryParams\",\n    value: function _encodeRequestQueryParams(request) {\n      var res = '';\n      var queryParams = request.queryParameters();\n      var paramPairs = [];\n\n      for (var d in queryParams) {\n        paramPairs.push(this._rfc3986EncodeURIComponent(d) + '=' + this._formatQueryParameterValue(queryParams[d]));\n      }\n\n      res += paramPairs.join('&');\n\n      if (res.length > 0) {\n        res = '?' + res;\n      }\n\n      return res;\n    } //https://stackoverflow.com/questions/18251399/why-doesnt-encodeuricomponent-encode-single-quotes-apostrophes\n\n  }, {\n    key: \"_rfc3986EncodeURIComponent\",\n    value: function _rfc3986EncodeURIComponent(str) {\n      return encodeURIComponent(str).replace(/[!'()*]/g, escape);\n    }\n  }, {\n    key: \"_formatQueryParameterValue\",\n    value: function _formatQueryParameterValue(value) {\n      var _this = this;\n\n      if (value instanceof Array) {\n        return value.map(function (v) {\n          return _this._rfc3986EncodeURIComponent(v.toString());\n        }).join(',');\n      }\n\n      return this._rfc3986EncodeURIComponent(value.toString());\n    }\n  }, {\n    key: \"_split_requests\",\n    value: function _split_requests(requests, chunk_size) {\n      //http://stackoverflow.com/questions/8495687/split-array-into-chunks\n      var result = [];\n      var i, j;\n\n      for (i = 0, j = requests.length; i < j; i += chunk_size) {\n        result.push(requests.slice(i, i + chunk_size));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_concat_multipart_results\",\n    value: function _concat_multipart_results(responses) {\n      return new Promise(function (resolve, reject) {\n        var result = [].concat.apply([], responses);\n        resolve(result);\n      });\n    }\n  }, {\n    key: \"_send_batch_part_rec\",\n    value: function _send_batch_part_rec(requests, results) {\n      var _this2 = this;\n\n      if (requests.length == 0) return new Promise(function (resolve) {\n        resolve(results);\n      });\n      var request = requests.shift();\n      return this.send(request).then(function (result) {\n        results.push(result);\n        return _this2._send_batch_part_rec(requests, results);\n      });\n    }\n  }, {\n    key: \"_send_multipart_batch\",\n    value: function _send_multipart_batch(batch, callback) {\n      var chunks = this._split_requests(batch.requests, BATCH_MAX_SIZE);\n\n      var rqs = chunks.map(function (rqs) {\n        return new requests.Batch(rqs);\n      });\n      return this._send_batch_part_rec(rqs, []).then(this._concat_multipart_results).then(function (response) {\n        return new Promise(function (resolve) {\n          if (callback) {\n            return callback(null, response);\n          }\n\n          return resolve(response);\n        });\n      })[\"catch\"](function (error) {\n        if (callback) {\n          return callback(error);\n        }\n\n        ;\n        throw error;\n      });\n    }\n  }, {\n    key: \"_parseResponse\",\n    value: function _parseResponse(response) {\n      return new Promise(function (resolve, reject) {\n        resolve(response.body);\n      });\n    }\n  }, {\n    key: \"_signUrl\",\n    value: function _signUrl(req_part) {\n      var url = '/' + this.databaseId + req_part;\n      url += (req_part.indexOf(\"?\") == -1 ? \"?\" : \"&\") + \"hmac_timestamp=\" + parseInt(new Date().getTime() / 1000);\n      var shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n      shaObj.setHMACKey(this.token, \"TEXT\");\n      shaObj.update(url);\n      url += \"&hmac_sign=\" + shaObj.getHMAC(\"HEX\");\n      return url;\n    }\n  }]);\n\n  return ApiClient;\n}();\n\nexports.ApiClient = ApiClient;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/api-client.js"],"names":["jsSHA","require","rp","rp_errors","api_errors","requests","BATCH_MAX_SIZE","ApiClient","databaseId","token","alwaysUseHttps","options","undefined","baseUri","process","env","RAPI_URI","request","callback","Batch","length","_send_multipart_batch","url","_buildRequestUrl","method","uri","headers","timeout","resolveWithFullResponse","json","proxy","bodyParameters","body","then","_parseResponse","response","Promise","resolve","StatusCodeError","error","ResponseError","statusCode","message","RequestError","cause","code","TimeoutError","protocol","ensureHttps","reqUrl","path","_encodeRequestQueryParams","signedUrl","_signUrl","res","queryParams","queryParameters","paramPairs","d","push","_rfc3986EncodeURIComponent","_formatQueryParameterValue","join","str","encodeURIComponent","replace","escape","value","Array","map","v","toString","chunk_size","result","i","j","slice","responses","reject","concat","apply","results","shift","send","_send_batch_part_rec","batch","chunks","_split_requests","rqs","_concat_multipart_results","req_part","indexOf","parseInt","Date","getTime","shaObj","setHMACKey","update","getHMAC","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst jsSHA = require(\"jssha\");\nconst rp = require('request-promise');\nconst rp_errors = require('request-promise/errors');\n\nconst api_errors = require('./errors');\nconst requests = require('./requests');\n\nconst BATCH_MAX_SIZE = 10000;\n/**\n  * Client for sending requests to Recombee and getting replies\n  */\nclass ApiClient {\n\n  /**\n   * Construct the client\n   * @param {string} databaseId - ID of your database\n   * @param {string} secretToken - Corresponding secret token\n   * @param {boolean} alwaysUseHttps - If true, all requests are sent using HTTPS (default: true)\n   * @param {Object} options - Other custom options\n   */\n  constructor (databaseId, token, alwaysUseHttps, options) {\n      this.databaseId = databaseId;\n      this.token = token;\n      this.alwaysUseHttps = (alwaysUseHttps === undefined) ? true : alwaysUseHttps;\n      this.options = options || {};\n      this.baseUri = process.env.RAPI_URI || this.options.baseUri || 'rapi.recombee.com';\n  }\n\n  /**\n   * Send the request to Recombee\n   * @param {Request} request - Request to be sent\n   * @param {Object} callback - Optional callback (send returns Promise if omitted) \n   */\n  send(request, callback) {\n\n    if (request instanceof requests.Batch && request.requests.length > BATCH_MAX_SIZE)\n      return this._send_multipart_batch(request);\n\n    let url = this._buildRequestUrl(request);\n    let options = {\n        method: request.method,\n        uri: url,\n        headers: {'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'User-Agent': 'recombee-node-api-client/3.0.0'},\n        timeout: request.timeout,\n        resolveWithFullResponse: true,\n        json: true\n    };\n\n    if (this.options.proxy)\n      options.proxy = this.options.proxy;\n\n    if (request.bodyParameters()) \n      options.body = request.bodyParameters();\n\n    return rp(options)\n           .then(this._parseResponse)\n           .then((response)=> {\n              return new Promise( (resolve) => {\n                if (callback) { return callback(null, response); }\n                return resolve(response);\n              });\n            })\n            .catch(rp_errors.StatusCodeError,((error) => {\n                throw new api_errors.ResponseError(request, error.statusCode, error.message);\n              }\n            ))\n            .catch(rp_errors.RequestError,((error) => {\n                if(error.cause.code === 'ETIMEDOUT' || error.cause.code === 'ESOCKETTIMEDOUT')\n                  throw new api_errors.TimeoutError(request, error);\n                throw error;\n              }\n            ))\n            .catch((error) => {\n              if (callback) {return callback(error)};\n              throw error;\n            });\n  }\n\n  _buildRequestUrl(request) {\n    let protocol = (request.ensureHttps || this.alwaysUseHttps) ? 'https' : 'http';\n    let reqUrl = request.path + this._encodeRequestQueryParams(request);\n    let signedUrl = this._signUrl(reqUrl);\n    return protocol + '://' + this.baseUri + signedUrl;\n  }\n\n  _encodeRequestQueryParams(request) {\n    let res = ''\n    let queryParams = request.queryParameters();\n    let paramPairs = [];\n    for (let d in queryParams)\n      paramPairs.push(this._rfc3986EncodeURIComponent(d) + '=' + this._formatQueryParameterValue(queryParams[d]));\n    res += paramPairs.join('&');\n    if (res.length > 0) {\n      res = '?' + res;\n    }\n    return res;\n  }\n\n  //https://stackoverflow.com/questions/18251399/why-doesnt-encodeuricomponent-encode-single-quotes-apostrophes\n  _rfc3986EncodeURIComponent (str) {  \n    return encodeURIComponent(str).replace(/[!'()*]/g, escape);  \n  }\n\n  _formatQueryParameterValue(value) {\n    if (value instanceof Array) {\n      return value.map((v) => this._rfc3986EncodeURIComponent(v.toString())).join(',');\n    }\n    return this._rfc3986EncodeURIComponent(value.toString());\n  }\n\n  _split_requests(requests, chunk_size) {\n    //http://stackoverflow.com/questions/8495687/split-array-into-chunks\n    let result = [];\n    let i,j;\n    for (i=0,j=requests.length; i<j; i+=chunk_size) {\n        result.push(requests.slice(i,i+chunk_size));\n    }\n    return result;\n  }\n\n  _concat_multipart_results(responses) {\n    return new Promise(\n      function (resolve, reject) {\n        let result = [].concat.apply([], responses);\n        resolve(result);\n      }\n    );\n  }\n\n  _send_batch_part_rec(requests, results) {\n    if (requests.length == 0)\n      return new Promise((resolve) => {resolve(results)});\n    let request = requests.shift();\n    return this.send(request)\n    .then((result) => {\n      results.push(result);\n      return this._send_batch_part_rec(requests, results);\n    });\n  }\n\n  _send_multipart_batch(batch, callback) {\n    let chunks = this._split_requests(batch.requests, BATCH_MAX_SIZE);\n    let rqs = chunks.map((rqs) => new requests.Batch(rqs));\n    \n    return this._send_batch_part_rec(rqs, [])\n      .then(this._concat_multipart_results)\n      .then((response)=> {\n\n        return new Promise( (resolve) => {\n          if (callback) { return callback(null, response); }\n          return resolve(response);\n        });\n      })\n      .catch((error) => {\n        if (callback) {return callback(error)};\n        throw error;\n      });\n  }\n\n  _parseResponse(response) {\n    return new Promise(\n      function (resolve, reject) {\n        resolve(response.body);\n      }\n    );\n  }\n\n  _signUrl (req_part) {\n    let url = '/' + this.databaseId + req_part;\n    url += (req_part.indexOf(\"?\") == -1 ? \"?\" : \"&\" ) + \"hmac_timestamp=\" + parseInt(new Date().getTime() / 1000);\n    \n    let shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n    shaObj.setHMACKey(this.token, \"TEXT\");\n    shaObj.update(url);\n\n    url += \"&hmac_sign=\" + shaObj.getHMAC(\"HEX\");\n    return url;\n  }\n}\n\nexports.ApiClient = ApiClient\n"]},"metadata":{},"sourceType":"script"}