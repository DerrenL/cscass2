{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Inserts an existing item/group into group of given `groupId`.\n */\n\n\nvar InsertToGroup = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(InsertToGroup, _rqs$Request);\n\n  var _super = _createSuper(InsertToGroup);\n\n  /**\n   * Construct the request\n   * @param {string} groupId - ID of the group to be inserted into.\n   * @param {string} itemType - `item` iff the regular item from the catalog is to be inserted, `group` iff group is inserted as the item.\n   * @param {string} itemId - ID of the item iff `itemType` is `item`. ID of the group iff `itemType` is `group`.\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: Indicates that any non-existing entity specified within the request should be created (as is corresponding PUT requests were invoked). This concerns both the `groupId` and the `groupId`. If `cascadeCreate` is set true, the behavior also depends on the `itemType`. Either items or group may be created if not present in the database.\n   */\n  function InsertToGroup(groupId, itemType, itemId, optional) {\n    var _this;\n\n    _classCallCheck(this, InsertToGroup);\n\n    _this = _super.call(this, 'POST', \"/groups/\".concat(groupId, \"/items/\"), 1000, false);\n    _this.groupId = groupId;\n    _this.itemType = itemType;\n    _this.itemId = itemId;\n    optional = optional || {};\n    _this.cascadeCreate = optional.cascadeCreate;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(InsertToGroup, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      params.itemType = this.itemType;\n      params.itemId = this.itemId;\n      if (this.cascadeCreate !== undefined) params.cascadeCreate = this.cascadeCreate;\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      return params;\n    }\n  }]);\n\n  return InsertToGroup;\n}(rqs.Request);\n\nexports.InsertToGroup = InsertToGroup;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/insert-to-group.js"],"names":["rqs","require","InsertToGroup","groupId","itemType","itemId","optional","cascadeCreate","params","undefined","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;IAGMC,a;;;;;AAEJ;;;;;;;;;;;AAWA,yBAAYC,OAAZ,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiD;AAAA;;AAAA;;AAC/C,8BAAM,MAAN,oBAAyBH,OAAzB,cAA2C,IAA3C,EAAiD,KAAjD;AACA,UAAKA,OAAL,GAAeA,OAAf;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AACA,UAAKC,MAAL,GAAcA,MAAd;AACAC,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,UAAKC,aAAL,GAAqBD,QAAQ,CAACC,aAA9B;AAN+C;AAOhD;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACJ,QAAP,GAAkB,KAAKA,QAAvB;AACAI,MAAAA,MAAM,CAACH,MAAP,GAAgB,KAAKA,MAArB;AAEA,UAAG,KAAKE,aAAL,KAAuBE,SAA1B,EACED,MAAM,CAACD,aAAP,GAAuB,KAAKA,aAA5B;AAEF,aAAOC,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACA,aAAOA,MAAP;AACD;;;;EA5CyBR,GAAG,CAACU,O;;AA+ChCC,OAAO,CAACT,aAAR,GAAwBA,aAAxB","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Inserts an existing item/group into group of given `groupId`.\n */\nclass InsertToGroup extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} groupId - ID of the group to be inserted into.\n   * @param {string} itemType - `item` iff the regular item from the catalog is to be inserted, `group` iff group is inserted as the item.\n   * @param {string} itemId - ID of the item iff `itemType` is `item`. ID of the group iff `itemType` is `group`.\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: Indicates that any non-existing entity specified within the request should be created (as is corresponding PUT requests were invoked). This concerns both the `groupId` and the `groupId`. If `cascadeCreate` is set true, the behavior also depends on the `itemType`. Either items or group may be created if not present in the database.\n   */\n  constructor(groupId, itemType, itemId, optional) {\n    super('POST', `/groups/${groupId}/items/`, 1000, false);\n    this.groupId = groupId;\n    this.itemType = itemType;\n    this.itemId = itemId;\n    optional = optional || {};\n    this.cascadeCreate = optional.cascadeCreate;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n    params.itemType = this.itemType;\n    params.itemId = this.itemId;\n\n    if(this.cascadeCreate !== undefined)\n      params.cascadeCreate = this.cascadeCreate;\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    return params;\n  }\n}\n\nexports.InsertToGroup = InsertToGroup\n"]},"metadata":{},"sourceType":"script"}