{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar path = require('path');\n\nvar utils = require('./utils');\n\nvar _require = require('./Error'),\n    StripeConnectionError = _require.StripeConnectionError,\n    StripeAuthenticationError = _require.StripeAuthenticationError,\n    StripePermissionError = _require.StripePermissionError,\n    StripeRateLimitError = _require.StripeRateLimitError,\n    StripeError = _require.StripeError,\n    StripeAPIError = _require.StripeAPIError;\n\nvar defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nvar defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n}); // Provide extension mechanism for Stripe Resource Sub-Classes\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nvar MAX_RETRY_AFTER_WAIT = 60;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n  initialize: function initialize() {},\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n  createFullPath: function createFullPath(commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function createResourcePathWithSymbols(pathWithSymbols) {\n    return \"/\".concat(path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/')); // ugly workaround for Windows\n  },\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n  _timeoutHandler: function _timeoutHandler(timeout, req, callback) {\n    var _this = this;\n\n    return function () {\n      var timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req._isAborted = true;\n      req.abort();\n      callback.call(_this, new StripeConnectionError({\n        message: \"Request aborted due to timeout being reached (\".concat(timeout, \"ms)\"),\n        detail: timeoutErr\n      }), null);\n    };\n  },\n  _responseHandler: function _responseHandler(req, callback) {\n    var _this2 = this;\n\n    return function (res) {\n      var response = '';\n      res.setEncoding('utf8');\n      res.on('data', function (chunk) {\n        response += chunk;\n      });\n      res.once('end', function () {\n        var headers = res.headers || {}; // NOTE: Stripe responds with lowercase header names/keys.\n        // For convenience, make some headers easily accessible on\n        // lastResponse.\n\n        res.requestId = headers['request-id'];\n        var stripeAccount = headers['stripe-account'];\n\n        if (stripeAccount) {\n          res.stripeAccount = stripeAccount;\n        }\n\n        var apiVersion = headers['stripe-version'];\n\n        if (apiVersion) {\n          res.apiVersion = apiVersion;\n        }\n\n        var idempotencyKey = headers['idempotency-key'];\n\n        if (idempotencyKey) {\n          res.idempotencyKey = idempotencyKey;\n        }\n\n        var requestEndTime = Date.now();\n        var requestDurationMs = requestEndTime - req._requestStart;\n        var responseEvent = utils.removeNullish({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs,\n          request_start_time: req._requestStart,\n          request_end_time: requestEndTime\n        });\n\n        _this2._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            var err; // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new StripeRateLimitError(response.error);\n            } else {\n              err = StripeError.generate(response.error);\n            }\n\n            return callback.call(_this2, err, null);\n          }\n        } catch (e) {\n          return callback.call(_this2, new StripeAPIError({\n            message: 'Invalid JSON received from the Stripe API',\n            response: response,\n            exception: e,\n            requestId: headers['request-id']\n          }), null);\n        }\n\n        _this2._recordRequestMetrics(res.requestId, requestDurationMs); // Expose res object\n\n\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res\n        });\n        callback.call(_this2, null, response);\n      });\n    };\n  },\n  _generateConnectionErrorMessage: function _generateConnectionErrorMessage(requestRetries) {\n    return \"An error occurred with our connection to Stripe.\".concat(requestRetries > 0 ? \" Request was retried \".concat(requestRetries, \" times.\") : '');\n  },\n  _errorHandler: function _errorHandler(req, requestRetries, callback) {\n    var _this3 = this;\n\n    return function (error) {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n\n      callback.call(_this3, new StripeConnectionError({\n        message: _this3._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry: function _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n\n\n    if (res.headers && res.headers['stripe-should-retry'] === 'false') {\n      return false;\n    }\n\n    if (res.headers && res.headers['stripe-should-retry'] === 'true') {\n      return true;\n    } // Retry on conflict errors.\n\n\n    if (res.statusCode === 409) {\n      return true;\n    } // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n\n\n    if (res.statusCode >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n  _getSleepTimeInMS: function _getSleepTimeInMS(numRetries) {\n    var retryAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    var maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    var sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds); // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries: function _getMaxNetworkRetries() {\n    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  },\n  _defaultIdempotencyKey: function _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    var maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return \"stripe-node-retry-\".concat(utils.uuid4());\n    }\n\n    return null;\n  },\n  _makeHeaders: function _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    var defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? \"Bearer \".concat(auth) : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    };\n    return Object.assign(utils.removeNullish(defaultHeaders), // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    utils.normalizeHeaders(userSuppliedHeaders));\n  },\n  _getUserAgentString: function _getUserAgentString() {\n    var packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n\n    var appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return \"Stripe/v1 NodeBindings/\".concat(packageVersion, \" \").concat(appInfo).trim();\n  },\n  _getTelemetryHeader: function _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      var metrics = this._stripe._prevRequestMetrics.shift();\n\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  },\n  _recordRequestMetrics: function _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        });\n      }\n    }\n  },\n  _request: function _request(method, host, path, data, auth) {\n    var _this4 = this;\n\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var callback = arguments.length > 6 ? arguments[6] : undefined;\n    var requestData;\n\n    var retryRequest = function retryRequest(requestFn, apiVersion, headers, requestRetries, retryAfter) {\n      return setTimeout(requestFn, _this4._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n\n    var makeRequest = function makeRequest(apiVersion, headers, numRetries) {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      var timeout = options.settings && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : _this4._stripe.getApiField('timeout');\n      var isInsecureConnection = _this4._stripe.getApiField('protocol') === 'http';\n\n      var agent = _this4._stripe.getApiField('agent');\n\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      var req = (isInsecureConnection ? http : https).request({\n        host: host || _this4._stripe.getApiField('host'),\n        port: _this4._stripe.getApiField('port'),\n        path: path,\n        method: method,\n        agent: agent,\n        headers: headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      });\n      var requestStartTime = Date.now();\n      var requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method: method,\n        path: path,\n        request_start_time: requestStartTime\n      });\n      var requestRetries = numRetries || 0;\n\n      var maxRetries = _this4._getMaxNetworkRetries(options.settings);\n\n      req._requestEvent = requestEvent;\n      req._requestStart = requestStartTime;\n\n      _this4._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, _this4._timeoutHandler(timeout, req, callback));\n      req.once('response', function (res) {\n        if (_this4._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, ((res || {}).headers || {})['retry-after']);\n        } else {\n          return _this4._responseHandler(req, callback)(res);\n        }\n      });\n      req.on('error', function (error) {\n        if (_this4._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          return _this4._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n      req.once('socket', function (socket) {\n        if (socket.connecting) {\n          socket.once(isInsecureConnection ? 'connect' : 'secureConnect', function () {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    };\n\n    var prepareAndMakeRequest = function prepareAndMakeRequest(error, data) {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      _this4._stripe.getClientUserAgent(function (clientUserAgent) {\n        var apiVersion = _this4._stripe.getApiField('version');\n\n        var headers = _this4._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, options.headers, options.settings);\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  }\n};\nmodule.exports = StripeResource;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/stripe/lib/StripeResource.js"],"names":["http","require","https","path","utils","StripeConnectionError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeError","StripeAPIError","defaultHttpAgent","Agent","keepAlive","defaultHttpsAgent","StripeResource","extend","protoExtend","method","BASIC_METHODS","MAX_BUFFERED_REQUEST_METRICS","MAX_RETRY_AFTER_WAIT","stripe","deprecatedUrlData","_stripe","Error","basePath","makeURLInterpolator","getApiField","resourcePath","includeBasic","forEach","methodName","initialize","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","urlData","join","replace","createResourcePathWithSymbols","pathWithSymbols","wrapTimeout","callbackifyPromiseWithTimeout","_timeoutHandler","timeout","req","callback","timeoutErr","TypeError","code","_isAborted","abort","call","message","detail","_responseHandler","res","response","setEncoding","on","chunk","once","headers","requestId","stripeAccount","apiVersion","idempotencyKey","requestEndTime","Date","now","requestDurationMs","_requestStart","responseEvent","removeNullish","api_version","account","idempotency_key","_requestEvent","status","statusCode","request_id","elapsed","request_start_time","request_end_time","_emitter","emit","JSON","parse","error","err","type","error_description","generate","e","exception","_recordRequestMetrics","Object","defineProperty","enumerable","writable","value","_generateConnectionErrorMessage","requestRetries","_errorHandler","_shouldRetry","numRetries","maxRetries","_getSleepTimeInMS","retryAfter","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","Number","isInteger","_getMaxNetworkRetries","settings","maxNetworkRetries","getMaxNetworkRetries","_defaultIdempotencyKey","uuid4","_makeHeaders","auth","contentLength","clientUserAgent","userSuppliedHeaders","userSuppliedSettings","defaultHeaders","Authorization","Accept","_getUserAgentString","_getTelemetryHeader","assign","normalizeHeaders","packageVersion","getConstant","appInfo","_appInfo","getAppInfoAsString","trim","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","stringify","last_request_metrics","emitWarning","push","request_duration_ms","_request","host","data","options","requestData","retryRequest","requestFn","setTimeout","makeRequest","isInsecureConnection","agent","request","port","ciphers","requestStartTime","requestEvent","socket","connecting","write","end","prepareAndMakeRequest","getClientUserAgent","stringifyRequestData","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst path = require('path');\n\nconst utils = require('./utils');\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError,\n} = require('./Error');\n\nconst defaultHttpAgent = new http.Agent({keepAlive: true});\nconst defaultHttpsAgent = new https.Agent({keepAlive: true});\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n  if (deprecatedUrlData) {\n    throw new Error(\n      'Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.'\n    );\n  }\n\n  this.basePath = utils.makeURLInterpolator(\n    this.basePath || stripe.getApiField('basePath')\n  );\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path\n      .join(\n        this.basePath(urlData),\n        this.path(urlData),\n        typeof commandPath == 'function' ? commandPath(urlData) : commandPath\n      )\n      .replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path\n      .join(this.resourcePath, pathWithSymbols || '')\n      .replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req._isAborted = true;\n      req.abort();\n\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: `Request aborted due to timeout being reached (${timeout}ms)`,\n          detail: timeoutErr,\n        }),\n        null\n      );\n    };\n  },\n\n  _responseHandler(req, callback) {\n    return (res) => {\n      let response = '';\n\n      res.setEncoding('utf8');\n      res.on('data', (chunk) => {\n        response += chunk;\n      });\n      res.once('end', () => {\n        const headers = res.headers || {};\n        // NOTE: Stripe responds with lowercase header names/keys.\n\n        // For convenience, make some headers easily accessible on\n        // lastResponse.\n        res.requestId = headers['request-id'];\n\n        const stripeAccount = headers['stripe-account'];\n        if (stripeAccount) {\n          res.stripeAccount = stripeAccount;\n        }\n\n        const apiVersion = headers['stripe-version'];\n        if (apiVersion) {\n          res.apiVersion = apiVersion;\n        }\n\n        const idempotencyKey = headers['idempotency-key'];\n        if (idempotencyKey) {\n          res.idempotencyKey = idempotencyKey;\n        }\n\n        const requestEndTime = Date.now();\n        const requestDurationMs = requestEndTime - req._requestStart;\n\n        const responseEvent = utils.removeNullish({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs,\n          request_start_time: req._requestStart,\n          request_end_time: requestEndTime,\n        });\n\n        this._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            let err;\n\n            // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description,\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new StripeRateLimitError(response.error);\n            } else {\n              err = StripeError.generate(response.error);\n            }\n            return callback.call(this, err, null);\n          }\n        } catch (e) {\n          return callback.call(\n            this,\n            new StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              response,\n              exception: e,\n              requestId: headers['request-id'],\n            }),\n            null\n          );\n        }\n\n        this._recordRequestMetrics(res.requestId, requestDurationMs);\n\n        // Expose res object\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res,\n        });\n        callback.call(this, null, response);\n      });\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${\n      requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''\n    }`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (error) => {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: this._generateConnectionErrorMessage(requestRetries),\n          detail: error,\n        }),\n        null\n      );\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    }\n\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n\n    // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n    if (res.headers && res.headers['stripe-should-retry'] === 'false') {\n      return false;\n    }\n    if (res.headers && res.headers['stripe-should-retry'] === 'true') {\n      return true;\n    }\n\n    // Retry on conflict errors.\n    if (res.statusCode === 409) {\n      return true;\n    }\n\n    // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n    if (res.statusCode >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    let sleepSeconds = Math.min(\n      initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),\n      maxNetworkRetryDelay\n    );\n\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n\n    // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries &&\n      Number.isInteger(settings.maxNetworkRetries)\n      ? settings.maxNetworkRetries\n      : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n    return null;\n  },\n\n  _makeHeaders(\n    auth,\n    contentLength,\n    apiVersion,\n    clientUserAgent,\n    method,\n    userSuppliedHeaders,\n    userSuppliedSettings\n  ) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Idempotency-Key': this._defaultIdempotencyKey(\n        method,\n        userSuppliedSettings\n      ),\n    };\n\n    return Object.assign(\n      utils.removeNullish(defaultHeaders),\n      // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n      utils.normalizeHeaders(userSuppliedHeaders)\n    );\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n    const appInfo = this._stripe._appInfo\n      ? this._stripe.getAppInfoAsString()\n      : '';\n\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (\n      this._stripe.getTelemetryEnabled() &&\n      this._stripe._prevRequestMetrics.length > 0\n    ) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n      return JSON.stringify({\n        last_request_metrics: metrics,\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (\n        this._stripe._prevRequestMetrics.length >\n        StripeResource.MAX_BUFFERED_REQUEST_METRICS\n      ) {\n        utils.emitWarning(\n          'Request metrics buffer is full, dropping telemetry message.'\n        );\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs,\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (\n      requestFn,\n      apiVersion,\n      headers,\n      requestRetries,\n      retryAfter\n    ) => {\n      return setTimeout(\n        requestFn,\n        this._getSleepTimeInMS(requestRetries, retryAfter),\n        apiVersion,\n        headers,\n        requestRetries + 1\n      );\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout =\n        options.settings &&\n        Number.isInteger(options.settings.timeout) &&\n        options.settings.timeout >= 0\n          ? options.settings.timeout\n          : this._stripe.getApiField('timeout');\n\n      const isInsecureConnection =\n        this._stripe.getApiField('protocol') === 'http';\n      let agent = this._stripe.getApiField('agent');\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      const req = (isInsecureConnection ? http : https).request({\n        host: host || this._stripe.getApiField('host'),\n        port: this._stripe.getApiField('port'),\n        path,\n        method,\n        agent,\n        headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',\n      });\n\n      const requestStartTime = Date.now();\n\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime,\n      });\n\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      req._requestEvent = requestEvent;\n\n      req._requestStart = requestStartTime;\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, this._timeoutHandler(timeout, req, callback));\n\n      req.once('response', (res) => {\n        if (this._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(\n            makeRequest,\n            apiVersion,\n            headers,\n            requestRetries,\n            ((res || {}).headers || {})['retry-after']\n          );\n        } else {\n          return this._responseHandler(req, callback)(res);\n        }\n      });\n\n      req.on('error', (error) => {\n        if (this._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(\n            makeRequest,\n            apiVersion,\n            headers,\n            requestRetries,\n            null\n          );\n        } else {\n          return this._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n\n      req.once('socket', (socket) => {\n        if (socket.connecting) {\n          socket.once(\n            isInsecureConnection ? 'connect' : 'secureConnect',\n            () => {\n              // Send payload; we're safe:\n              req.write(requestData);\n              req.end();\n            }\n          );\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent((clientUserAgent) => {\n        const apiVersion = this._stripe.getApiField('version');\n        const headers = this._makeHeaders(\n          auth,\n          requestData.length,\n          apiVersion,\n          clientUserAgent,\n          method,\n          options.headers,\n          options.settings\n        );\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(\n        method,\n        data,\n        options.headers,\n        prepareAndMakeRequest\n      );\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  },\n};\n\nmodule.exports = StripeResource;\n"]},"metadata":{},"sourceType":"script"}