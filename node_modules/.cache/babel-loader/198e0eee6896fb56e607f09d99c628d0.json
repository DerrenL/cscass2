{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Based on user's past interactions (purchases, ratings, etc.) with the items, recommends top-N items that are most likely to be of high value for a given user.\n * The most typical use cases are recommendations at homepage, in some \"Picked just for you\" section or in email.\n * It is also possible to use POST HTTP method (for example in case of very long ReQL filter) - query parameters then become body parameters.\n * The returned items are sorted by relevancy (first item being the most relevant).\n */\n\n\nvar RecommendItemsToUser = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(RecommendItemsToUser, _rqs$Request);\n\n  var _super = _createSuper(RecommendItemsToUser);\n\n  /**\n   * Construct the request\n   * @param {string} userId - ID of the user for whom personalized recommendations are to be generated.\n   * @param {number} count - Number of items to be recommended (N for the top-N recommendation).\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *scenario*\n   *         - Type: string\n   *         - Description: Scenario defines a particular application of recommendations. It can be for example \"homepage\", \"cart\" or \"emailing\".\n   * You can set various settings to the [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com). You can also see performance of each scenario in the Admin UI separately, so you can check how well each application performs.\n   * The AI which optimizes models in order to get the best results may optimize different scenarios separately, or even use different models in each of the scenarios.\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: If the user does not exist in the database, returns a list of non-personalized recommendations and creates the user in the database. This allows for example rotations in the following recommendations for that user, as the user will be already known to the system.\n   *     - *returnProperties*\n   *         - Type: boolean\n   *         - Description: With `returnProperties=true`, property values of the recommended items are returned along with their IDs in a JSON dictionary. The acquired property values can be used for easy displaying of the recommended items to the user. \n   * Example response:\n   * ```\n   *   {\n   *     \"recommId\": \"ce52ada4-e4d9-4885-943c-407db2dee837\",\n   *     \"recomms\": \n   *       [\n   *         {\n   *           \"id\": \"tv-178\",\n   *           \"values\": {\n   *             \"description\": \"4K TV with 3D feature\",\n   *             \"categories\":   [\"Electronics\", \"Televisions\"],\n   *             \"price\": 342,\n   *             \"url\": \"myshop.com/tv-178\"\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"mixer-42\",\n   *           \"values\": {\n   *             \"description\": \"Stainless Steel Mixer\",\n   *             \"categories\":   [\"Home & Kitchen\"],\n   *             \"price\": 39,\n   *             \"url\": \"myshop.com/mixer-42\"\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *includedProperties*\n   *         - Type: string[]\n   *         - Description: Allows to specify, which properties should be returned when `returnProperties=true` is set. The properties are given as a comma-separated list. \n   * Example response for `includedProperties=description,price`:\n   * ```\n   *   {\n   *     \"recommId\": \"a86ee8d5-cd8e-46d1-886c-8b3771d0520b\",\n   *     \"recomms\":\n   *       [\n   *         {\n   *           \"id\": \"tv-178\",\n   *           \"values\": {\n   *             \"description\": \"4K TV with 3D feature\",\n   *             \"price\": 342\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"mixer-42\",\n   *           \"values\": {\n   *             \"description\": \"Stainless Steel Mixer\",\n   *             \"price\": 39\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *filter*\n   *         - Type: string\n   *         - Description: Boolean-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to filter recommended items based on the values of their attributes.\n   * Filters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *booster*\n   *         - Type: string\n   *         - Description: Number-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to boost recommendation rate of some items based on the values of their attributes.\n   * Boosters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *logic*\n   *         - Type: string|\n   *         - Description: Logic specifies particular behavior of the recommendation models. You can pick tailored logic for your domain and use case.\n   * See [this section](https://docs.recombee.com/recommendation_logics.html) for list of available logics and other details.\n   * The difference between `logic` and `scenario` is that `logic` specifies mainly behavior, while `scenario` specifies the place where recommendations are shown to the users.\n   * Logic can be also set to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *diversity*\n   *         - Type: number\n   *         - Description: **Expert option** Real number from [0.0, 1.0] which determines how much mutually dissimilar should the recommended items be. The default value is 0.0, i.e., no diversification. Value 1.0 means maximal diversification.\n   *     - *minRelevance*\n   *         - Type: string\n   *         - Description: **Expert option** Specifies the threshold of how much relevant must the recommended items be to the user. Possible values one of: \"low\", \"medium\", \"high\". The default value is \"low\", meaning that the system attempts to recommend number of items equal to *count* at any cost. If there are not enough data (such as interactions or item properties), this may even lead to bestseller-based recommendations to be appended to reach the full *count*. This behavior may be suppressed by using \"medium\" or \"high\" values. In such case, the system only recommends items of at least the requested relevancy, and may return less than *count* items when there is not enough data to fulfill it.\n   *     - *rotationRate*\n   *         - Type: number\n   *         - Description: **Expert option** If your users browse the system in real-time, it may easily happen that you wish to offer them recommendations multiple times. Here comes the question: how much should the recommendations change? Should they remain the same, or should they rotate? Recombee API allows you to control this per-request in backward fashion. You may penalize an item for being recommended in the near past. For the specific user, `rotationRate=1` means maximal rotation, `rotationRate=0` means absolutely no rotation. You may also use, for example `rotationRate=0.2` for only slight rotation of recommended items. Default: `0.1`.\n   *     - *rotationTime*\n   *         - Type: number\n   *         - Description: **Expert option** Taking *rotationRate* into account, specifies how long time it takes to an item to recover from the penalization. For example, `rotationTime=7200.0` means that items recommended less than 2 hours ago are penalized. Default: `7200.0`.\n   *     - *expertSettings*\n   *         - Type: \n   *         - Description: Dictionary of custom options.\n   *     - *returnAbGroup*\n   *         - Type: boolean\n   *         - Description: If there is a custom AB-testing running, return name of group to which the request belongs.\n   */\n  function RecommendItemsToUser(userId, count, optional) {\n    var _this;\n\n    _classCallCheck(this, RecommendItemsToUser);\n\n    _this = _super.call(this, 'POST', \"/recomms/users/\".concat(userId, \"/items/\"), 3000, false);\n    _this.userId = userId;\n    _this.count = count;\n    optional = optional || {};\n    _this.scenario = optional.scenario;\n    _this.cascadeCreate = optional.cascadeCreate;\n    _this.returnProperties = optional.returnProperties;\n    _this.includedProperties = optional.includedProperties;\n    _this.filter = optional.filter;\n    _this.booster = optional.booster;\n    _this.logic = optional.logic;\n    _this.diversity = optional.diversity;\n    _this.minRelevance = optional.minRelevance;\n    _this.rotationRate = optional.rotationRate;\n    _this.rotationTime = optional.rotationTime;\n    _this.expertSettings = optional.expertSettings;\n    _this.returnAbGroup = optional.returnAbGroup;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(RecommendItemsToUser, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      params.count = this.count;\n      if (this.scenario !== undefined) params.scenario = this.scenario;\n      if (this.cascadeCreate !== undefined) params.cascadeCreate = this.cascadeCreate;\n      if (this.returnProperties !== undefined) params.returnProperties = this.returnProperties;\n      if (this.includedProperties !== undefined) params.includedProperties = this.includedProperties;\n      if (this.filter !== undefined) params.filter = this.filter;\n      if (this.booster !== undefined) params.booster = this.booster;\n      if (this.logic !== undefined) params.logic = this.logic;\n      if (this.diversity !== undefined) params.diversity = this.diversity;\n      if (this.minRelevance !== undefined) params.minRelevance = this.minRelevance;\n      if (this.rotationRate !== undefined) params.rotationRate = this.rotationRate;\n      if (this.rotationTime !== undefined) params.rotationTime = this.rotationTime;\n      if (this.expertSettings !== undefined) params.expertSettings = this.expertSettings;\n      if (this.returnAbGroup !== undefined) params.returnAbGroup = this.returnAbGroup;\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      return params;\n    }\n  }]);\n\n  return RecommendItemsToUser;\n}(rqs.Request);\n\nexports.RecommendItemsToUser = RecommendItemsToUser;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/recommend-items-to-user.js"],"names":["rqs","require","RecommendItemsToUser","userId","count","optional","scenario","cascadeCreate","returnProperties","includedProperties","filter","booster","logic","diversity","minRelevance","rotationRate","rotationTime","expertSettings","returnAbGroup","params","undefined","Request","exports"],"mappings":"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","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Based on user's past interactions (purchases, ratings, etc.) with the items, recommends top-N items that are most likely to be of high value for a given user.\n * The most typical use cases are recommendations at homepage, in some \"Picked just for you\" section or in email.\n * It is also possible to use POST HTTP method (for example in case of very long ReQL filter) - query parameters then become body parameters.\n * The returned items are sorted by relevancy (first item being the most relevant).\n */\nclass RecommendItemsToUser extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} userId - ID of the user for whom personalized recommendations are to be generated.\n   * @param {number} count - Number of items to be recommended (N for the top-N recommendation).\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *scenario*\n   *         - Type: string\n   *         - Description: Scenario defines a particular application of recommendations. It can be for example \"homepage\", \"cart\" or \"emailing\".\n   * You can set various settings to the [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com). You can also see performance of each scenario in the Admin UI separately, so you can check how well each application performs.\n   * The AI which optimizes models in order to get the best results may optimize different scenarios separately, or even use different models in each of the scenarios.\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: If the user does not exist in the database, returns a list of non-personalized recommendations and creates the user in the database. This allows for example rotations in the following recommendations for that user, as the user will be already known to the system.\n   *     - *returnProperties*\n   *         - Type: boolean\n   *         - Description: With `returnProperties=true`, property values of the recommended items are returned along with their IDs in a JSON dictionary. The acquired property values can be used for easy displaying of the recommended items to the user. \n   * Example response:\n   * ```\n   *   {\n   *     \"recommId\": \"ce52ada4-e4d9-4885-943c-407db2dee837\",\n   *     \"recomms\": \n   *       [\n   *         {\n   *           \"id\": \"tv-178\",\n   *           \"values\": {\n   *             \"description\": \"4K TV with 3D feature\",\n   *             \"categories\":   [\"Electronics\", \"Televisions\"],\n   *             \"price\": 342,\n   *             \"url\": \"myshop.com/tv-178\"\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"mixer-42\",\n   *           \"values\": {\n   *             \"description\": \"Stainless Steel Mixer\",\n   *             \"categories\":   [\"Home & Kitchen\"],\n   *             \"price\": 39,\n   *             \"url\": \"myshop.com/mixer-42\"\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *includedProperties*\n   *         - Type: string[]\n   *         - Description: Allows to specify, which properties should be returned when `returnProperties=true` is set. The properties are given as a comma-separated list. \n   * Example response for `includedProperties=description,price`:\n   * ```\n   *   {\n   *     \"recommId\": \"a86ee8d5-cd8e-46d1-886c-8b3771d0520b\",\n   *     \"recomms\":\n   *       [\n   *         {\n   *           \"id\": \"tv-178\",\n   *           \"values\": {\n   *             \"description\": \"4K TV with 3D feature\",\n   *             \"price\": 342\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"mixer-42\",\n   *           \"values\": {\n   *             \"description\": \"Stainless Steel Mixer\",\n   *             \"price\": 39\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *filter*\n   *         - Type: string\n   *         - Description: Boolean-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to filter recommended items based on the values of their attributes.\n   * Filters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *booster*\n   *         - Type: string\n   *         - Description: Number-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to boost recommendation rate of some items based on the values of their attributes.\n   * Boosters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *logic*\n   *         - Type: string|\n   *         - Description: Logic specifies particular behavior of the recommendation models. You can pick tailored logic for your domain and use case.\n   * See [this section](https://docs.recombee.com/recommendation_logics.html) for list of available logics and other details.\n   * The difference between `logic` and `scenario` is that `logic` specifies mainly behavior, while `scenario` specifies the place where recommendations are shown to the users.\n   * Logic can be also set to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *diversity*\n   *         - Type: number\n   *         - Description: **Expert option** Real number from [0.0, 1.0] which determines how much mutually dissimilar should the recommended items be. The default value is 0.0, i.e., no diversification. Value 1.0 means maximal diversification.\n   *     - *minRelevance*\n   *         - Type: string\n   *         - Description: **Expert option** Specifies the threshold of how much relevant must the recommended items be to the user. Possible values one of: \"low\", \"medium\", \"high\". The default value is \"low\", meaning that the system attempts to recommend number of items equal to *count* at any cost. If there are not enough data (such as interactions or item properties), this may even lead to bestseller-based recommendations to be appended to reach the full *count*. This behavior may be suppressed by using \"medium\" or \"high\" values. In such case, the system only recommends items of at least the requested relevancy, and may return less than *count* items when there is not enough data to fulfill it.\n   *     - *rotationRate*\n   *         - Type: number\n   *         - Description: **Expert option** If your users browse the system in real-time, it may easily happen that you wish to offer them recommendations multiple times. Here comes the question: how much should the recommendations change? Should they remain the same, or should they rotate? Recombee API allows you to control this per-request in backward fashion. You may penalize an item for being recommended in the near past. For the specific user, `rotationRate=1` means maximal rotation, `rotationRate=0` means absolutely no rotation. You may also use, for example `rotationRate=0.2` for only slight rotation of recommended items. Default: `0.1`.\n   *     - *rotationTime*\n   *         - Type: number\n   *         - Description: **Expert option** Taking *rotationRate* into account, specifies how long time it takes to an item to recover from the penalization. For example, `rotationTime=7200.0` means that items recommended less than 2 hours ago are penalized. Default: `7200.0`.\n   *     - *expertSettings*\n   *         - Type: \n   *         - Description: Dictionary of custom options.\n   *     - *returnAbGroup*\n   *         - Type: boolean\n   *         - Description: If there is a custom AB-testing running, return name of group to which the request belongs.\n   */\n  constructor(userId, count, optional) {\n    super('POST', `/recomms/users/${userId}/items/`, 3000, false);\n    this.userId = userId;\n    this.count = count;\n    optional = optional || {};\n    this.scenario = optional.scenario;\n    this.cascadeCreate = optional.cascadeCreate;\n    this.returnProperties = optional.returnProperties;\n    this.includedProperties = optional.includedProperties;\n    this.filter = optional.filter;\n    this.booster = optional.booster;\n    this.logic = optional.logic;\n    this.diversity = optional.diversity;\n    this.minRelevance = optional.minRelevance;\n    this.rotationRate = optional.rotationRate;\n    this.rotationTime = optional.rotationTime;\n    this.expertSettings = optional.expertSettings;\n    this.returnAbGroup = optional.returnAbGroup;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n    params.count = this.count;\n\n    if(this.scenario !== undefined)\n      params.scenario = this.scenario;\n\n    if(this.cascadeCreate !== undefined)\n      params.cascadeCreate = this.cascadeCreate;\n\n    if(this.returnProperties !== undefined)\n      params.returnProperties = this.returnProperties;\n\n    if(this.includedProperties !== undefined)\n      params.includedProperties = this.includedProperties;\n\n    if(this.filter !== undefined)\n      params.filter = this.filter;\n\n    if(this.booster !== undefined)\n      params.booster = this.booster;\n\n    if(this.logic !== undefined)\n      params.logic = this.logic;\n\n    if(this.diversity !== undefined)\n      params.diversity = this.diversity;\n\n    if(this.minRelevance !== undefined)\n      params.minRelevance = this.minRelevance;\n\n    if(this.rotationRate !== undefined)\n      params.rotationRate = this.rotationRate;\n\n    if(this.rotationTime !== undefined)\n      params.rotationTime = this.rotationTime;\n\n    if(this.expertSettings !== undefined)\n      params.expertSettings = this.expertSettings;\n\n    if(this.returnAbGroup !== undefined)\n      params.returnAbGroup = this.returnAbGroup;\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    return params;\n  }\n}\n\nexports.RecommendItemsToUser = RecommendItemsToUser\n"]},"metadata":{},"sourceType":"script"}