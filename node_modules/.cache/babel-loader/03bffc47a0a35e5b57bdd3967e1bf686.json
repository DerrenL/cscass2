{"ast":null,"code":"'use strict';\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar StripeError = /*#__PURE__*/function (_Error) {\n  _inherits(StripeError, _Error);\n\n  var _super = _createSuper(StripeError);\n\n  function StripeError() {\n    var _this;\n\n    var raw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, StripeError);\n\n    _this = _super.call(this, raw.message);\n    _this.type = _this.constructor.name;\n    _this.raw = raw;\n    _this.rawType = raw.type;\n    _this.code = raw.code;\n    _this.doc_url = raw.doc_url;\n    _this.param = raw.param;\n    _this.detail = raw.detail;\n    _this.headers = raw.headers;\n    _this.requestId = raw.requestId;\n    _this.statusCode = raw.statusCode;\n    _this.message = raw.message;\n    _this.charge = raw.charge;\n    _this.decline_code = raw.decline_code;\n    _this.payment_intent = raw.payment_intent;\n    _this.payment_method = raw.payment_method;\n    _this.setup_intent = raw.setup_intent;\n    _this.source = raw.source;\n    return _this;\n  }\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n\n\n  _createClass(StripeError, null, [{\n    key: \"generate\",\n    value: function generate(rawStripeError) {\n      switch (rawStripeError.type) {\n        case 'card_error':\n          return new StripeCardError(rawStripeError);\n\n        case 'invalid_request_error':\n          return new StripeInvalidRequestError(rawStripeError);\n\n        case 'api_error':\n          return new StripeAPIError(rawStripeError);\n\n        case 'authentication_error':\n          return new StripeAuthenticationError(rawStripeError);\n\n        case 'rate_limit_error':\n          return new StripeRateLimitError(rawStripeError);\n\n        case 'idempotency_error':\n          return new StripeIdempotencyError(rawStripeError);\n\n        case 'invalid_grant':\n          return new StripeInvalidGrantError(rawStripeError);\n\n        default:\n          return new GenericError('Generic', 'Unknown Error');\n      }\n    }\n  }]);\n\n  return StripeError;\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Specific Stripe Error types:\n\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\n\n\nvar StripeCardError = /*#__PURE__*/function (_StripeError) {\n  _inherits(StripeCardError, _StripeError);\n\n  var _super2 = _createSuper(StripeCardError);\n\n  function StripeCardError() {\n    _classCallCheck(this, StripeCardError);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return StripeCardError;\n}(StripeError);\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\n\n\nvar StripeInvalidRequestError = /*#__PURE__*/function (_StripeError2) {\n  _inherits(StripeInvalidRequestError, _StripeError2);\n\n  var _super3 = _createSuper(StripeInvalidRequestError);\n\n  function StripeInvalidRequestError() {\n    _classCallCheck(this, StripeInvalidRequestError);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return StripeInvalidRequestError;\n}(StripeError);\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\n\n\nvar StripeAPIError = /*#__PURE__*/function (_StripeError3) {\n  _inherits(StripeAPIError, _StripeError3);\n\n  var _super4 = _createSuper(StripeAPIError);\n\n  function StripeAPIError() {\n    _classCallCheck(this, StripeAPIError);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return StripeAPIError;\n}(StripeError);\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\n\n\nvar StripeAuthenticationError = /*#__PURE__*/function (_StripeError4) {\n  _inherits(StripeAuthenticationError, _StripeError4);\n\n  var _super5 = _createSuper(StripeAuthenticationError);\n\n  function StripeAuthenticationError() {\n    _classCallCheck(this, StripeAuthenticationError);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return StripeAuthenticationError;\n}(StripeError);\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\n\n\nvar StripePermissionError = /*#__PURE__*/function (_StripeError5) {\n  _inherits(StripePermissionError, _StripeError5);\n\n  var _super6 = _createSuper(StripePermissionError);\n\n  function StripePermissionError() {\n    _classCallCheck(this, StripePermissionError);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return StripePermissionError;\n}(StripeError);\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\n\n\nvar StripeRateLimitError = /*#__PURE__*/function (_StripeError6) {\n  _inherits(StripeRateLimitError, _StripeError6);\n\n  var _super7 = _createSuper(StripeRateLimitError);\n\n  function StripeRateLimitError() {\n    _classCallCheck(this, StripeRateLimitError);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return StripeRateLimitError;\n}(StripeError);\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\n\n\nvar StripeConnectionError = /*#__PURE__*/function (_StripeError7) {\n  _inherits(StripeConnectionError, _StripeError7);\n\n  var _super8 = _createSuper(StripeConnectionError);\n\n  function StripeConnectionError() {\n    _classCallCheck(this, StripeConnectionError);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return StripeConnectionError;\n}(StripeError);\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\n\n\nvar StripeSignatureVerificationError = /*#__PURE__*/function (_StripeError8) {\n  _inherits(StripeSignatureVerificationError, _StripeError8);\n\n  var _super9 = _createSuper(StripeSignatureVerificationError);\n\n  function StripeSignatureVerificationError() {\n    _classCallCheck(this, StripeSignatureVerificationError);\n\n    return _super9.apply(this, arguments);\n  }\n\n  return StripeSignatureVerificationError;\n}(StripeError);\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\n\n\nvar StripeIdempotencyError = /*#__PURE__*/function (_StripeError9) {\n  _inherits(StripeIdempotencyError, _StripeError9);\n\n  var _super10 = _createSuper(StripeIdempotencyError);\n\n  function StripeIdempotencyError() {\n    _classCallCheck(this, StripeIdempotencyError);\n\n    return _super10.apply(this, arguments);\n  }\n\n  return StripeIdempotencyError;\n}(StripeError);\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\n\n\nvar StripeInvalidGrantError = /*#__PURE__*/function (_StripeError10) {\n  _inherits(StripeInvalidGrantError, _StripeError10);\n\n  var _super11 = _createSuper(StripeInvalidGrantError);\n\n  function StripeInvalidGrantError() {\n    _classCallCheck(this, StripeInvalidGrantError);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return StripeInvalidGrantError;\n}(StripeError);\n\nmodule.exports.generate = StripeError.generate;\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/stripe/lib/Error.js"],"names":["StripeError","raw","message","type","constructor","name","rawType","code","doc_url","param","detail","headers","requestId","statusCode","charge","decline_code","payment_intent","payment_method","setup_intent","source","rawStripeError","StripeCardError","StripeInvalidRequestError","StripeAPIError","StripeAuthenticationError","StripeRateLimitError","StripeIdempotencyError","StripeInvalidGrantError","GenericError","Error","StripePermissionError","StripeConnectionError","StripeSignatureVerificationError","module","exports","generate"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\nclass StripeError extends Error {\n  constructor(raw = {}) {\n    super(raw.message);\n    this.type = this.constructor.name;\n\n    this.raw = raw;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.doc_url = raw.doc_url;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    this.message = raw.message;\n\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n      case 'authentication_error':\n        return new StripeAuthenticationError(rawStripeError);\n      case 'rate_limit_error':\n        return new StripeRateLimitError(rawStripeError);\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n      default:\n        return new GenericError('Generic', 'Unknown Error');\n    }\n  }\n}\n\n// Specific Stripe Error types:\n\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\nclass StripeCardError extends StripeError {}\n\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\nclass StripeInvalidRequestError extends StripeError {}\n\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\nclass StripeAPIError extends StripeError {}\n\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\nclass StripeAuthenticationError extends StripeError {}\n\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\nclass StripePermissionError extends StripeError {}\n\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\nclass StripeRateLimitError extends StripeError {}\n\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\nclass StripeConnectionError extends StripeError {}\n\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\nclass StripeSignatureVerificationError extends StripeError {}\n\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\nclass StripeIdempotencyError extends StripeError {}\n\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\nclass StripeInvalidGrantError extends StripeError {}\n\nmodule.exports.generate = StripeError.generate;\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;\n"]},"metadata":{},"sourceType":"script"}