{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Merges interactions (purchases, ratings, bookmarks, detail views ...) of two different users under a single user ID. This is especially useful for online e-commerce applications working with anonymous users identified by unique tokens such as the session ID. In such applications, it may often happen that a user owns a persistent account, yet accesses the system anonymously while, e.g., putting items into a shopping cart. At some point in time, such as when the user wishes to confirm the purchase, (s)he logs into the system using his/her username and password. The interactions made under anonymous session ID then become connected with the persistent account, and merging these two together becomes desirable.\n * Merging happens between two users referred to as the *target* and the *source*. After the merge, all the interactions of the source user are attributed to the target user, and the source user is **deleted**.\n */\n\n\nvar MergeUsers = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(MergeUsers, _rqs$Request);\n\n  var _super = _createSuper(MergeUsers);\n\n  /**\n   * Construct the request\n   * @param {string} targetUserId - ID of the targer user.\n   * @param {string} sourceUserId - ID of the source user.\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: Sets whether the user *targetUserId* should be created if not present in the database.\n   */\n  function MergeUsers(targetUserId, sourceUserId, optional) {\n    var _this;\n\n    _classCallCheck(this, MergeUsers);\n\n    _this = _super.call(this, 'PUT', \"/users/\".concat(targetUserId, \"/merge/\").concat(sourceUserId), 10000, false);\n    _this.targetUserId = targetUserId;\n    _this.sourceUserId = sourceUserId;\n    optional = optional || {};\n    _this.cascadeCreate = optional.cascadeCreate;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(MergeUsers, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      if (this.cascadeCreate !== undefined) params.cascadeCreate = this.cascadeCreate;\n      return params;\n    }\n  }]);\n\n  return MergeUsers;\n}(rqs.Request);\n\nexports.MergeUsers = MergeUsers;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/merge-users.js"],"names":["rqs","require","MergeUsers","targetUserId","sourceUserId","optional","cascadeCreate","params","undefined","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;;IAIMC,U;;;;;AAEJ;;;;;;;;;;AAUA,sBAAYC,YAAZ,EAA0BC,YAA1B,EAAwCC,QAAxC,EAAkD;AAAA;;AAAA;;AAChD,8BAAM,KAAN,mBAAuBF,YAAvB,oBAA6CC,YAA7C,GAA6D,KAA7D,EAAoE,KAApE;AACA,UAAKD,YAAL,GAAoBA,YAApB;AACA,UAAKC,YAAL,GAAoBA,YAApB;AACAC,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,UAAKC,aAAL,GAAqBD,QAAQ,CAACC,aAA9B;AALgD;AAMjD;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AAEA,aAAOA,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACA,UAAI,KAAKD,aAAL,KAAuBE,SAA3B,EACED,MAAM,CAACD,aAAP,GAAuB,KAAKA,aAA5B;AACF,aAAOC,MAAP;AACD;;;;EAvCsBP,GAAG,CAACS,O;;AA0C7BC,OAAO,CAACR,UAAR,GAAqBA,UAArB","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Merges interactions (purchases, ratings, bookmarks, detail views ...) of two different users under a single user ID. This is especially useful for online e-commerce applications working with anonymous users identified by unique tokens such as the session ID. In such applications, it may often happen that a user owns a persistent account, yet accesses the system anonymously while, e.g., putting items into a shopping cart. At some point in time, such as when the user wishes to confirm the purchase, (s)he logs into the system using his/her username and password. The interactions made under anonymous session ID then become connected with the persistent account, and merging these two together becomes desirable.\n * Merging happens between two users referred to as the *target* and the *source*. After the merge, all the interactions of the source user are attributed to the target user, and the source user is **deleted**.\n */\nclass MergeUsers extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} targetUserId - ID of the targer user.\n   * @param {string} sourceUserId - ID of the source user.\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: Sets whether the user *targetUserId* should be created if not present in the database.\n   */\n  constructor(targetUserId, sourceUserId, optional) {\n    super('PUT', `/users/${targetUserId}/merge/${sourceUserId}`, 10000, false);\n    this.targetUserId = targetUserId;\n    this.sourceUserId = sourceUserId;\n    optional = optional || {};\n    this.cascadeCreate = optional.cascadeCreate;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    if (this.cascadeCreate !== undefined)\n      params.cascadeCreate = this.cascadeCreate;\n    return params;\n  }\n}\n\nexports.MergeUsers = MergeUsers\n"]},"metadata":{},"sourceType":"script"}