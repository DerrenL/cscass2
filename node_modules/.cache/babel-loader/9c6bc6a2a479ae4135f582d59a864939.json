{"ast":null,"code":"'use strict';\n\nvar bind = require('./helpers/bind');\n/*global toString:true*/\n// utils is a library of generic helper functions non-specific to DeepAI\n\n\nvar toString = Object.prototype.toString;\n/**\r\n * Determine if a value is an Array\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Array, otherwise false\r\n */\n\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n/**\r\n * Determine if a value is an ArrayBuffer\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\r\n */\n\n\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n/**\r\n * Determine if a value is a FormData\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an FormData, otherwise false\r\n */\n\n\nfunction isFormData(val) {\n  return typeof FormData !== 'undefined' && val instanceof FormData;\n}\n/**\r\n * Determine if a value is a view on an ArrayBuffer\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\r\n */\n\n\nfunction isArrayBufferView(val) {\n  var result;\n\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && val.buffer instanceof ArrayBuffer;\n  }\n\n  return result;\n}\n/**\r\n * Determine if a value is a String\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a String, otherwise false\r\n */\n\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n/**\r\n * Determine if a value is a Number\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Number, otherwise false\r\n */\n\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n/**\r\n * Determine if a value is undefined\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if the value is undefined, otherwise false\r\n */\n\n\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n/**\r\n * Determine if a value is an Object\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Object, otherwise false\r\n */\n\n\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n/**\r\n * Determine if a value is a Date\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Date, otherwise false\r\n */\n\n\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n/**\r\n * Determine if a value is a File\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a File, otherwise false\r\n */\n\n\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n/**\r\n * Determine if a value is a Blob\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Blob, otherwise false\r\n */\n\n\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n/**\r\n * Determine if a value is a Function\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Function, otherwise false\r\n */\n\n\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n/**\r\n * Determine if a value is a Stream\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Stream, otherwise false\r\n */\n\n\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n/**\r\n * Determine if a value is a URLSearchParams object\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\r\n */\n\n\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n/**\r\n * Trim excess whitespace off the beginning and end of a string\r\n *\r\n * @param {String} str The String to trim\r\n * @returns {String} The String freed of excess whitespace\r\n */\n\n\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows DeepAI to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n */\n\n\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n */\n\n\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  } // Force an array if not already something iterable\n\n\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n/**\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n */\n\n\nfunction merge()\n/* obj1, obj2, obj3, ... */\n{\n  var result = {};\n\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n */\n\n\nfunction deepMerge()\n/* obj1, obj2, obj3, ... */\n{\n  var result = {};\n\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\r\n * Extends object a by mutably adding to it the properties of object b.\r\n *\r\n * @param {Object} a The object to be extended\r\n * @param {Object} b The object to copy properties from\r\n * @param {Object} thisArg The object to bind function to\r\n * @return {Object} The resulting value of object a\r\n */\n\n\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};","map":{"version":3,"sources":["C:/Users/khoo_/OneDrive/Desktop/CSC/cscass2/cscass2/node_modules/deepai/lib/utils.js"],"names":["bind","require","toString","Object","prototype","isArray","val","call","isArrayBuffer","isFormData","FormData","isArrayBufferView","result","ArrayBuffer","isView","buffer","isString","isNumber","isUndefined","isObject","isDate","isFile","isBlob","isFunction","isStream","pipe","isURLSearchParams","URLSearchParams","trim","str","replace","isStandardBrowserEnv","navigator","product","window","document","forEach","obj","fn","i","l","length","key","hasOwnProperty","merge","assignValue","arguments","deepMerge","extend","a","b","thisArg","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar bind = require('./helpers/bind');\r\n\r\n/*global toString:true*/\r\n\r\n// utils is a library of generic helper functions non-specific to DeepAI\r\n\r\nvar toString = Object.prototype.toString;\r\n\r\n/**\r\n * Determine if a value is an Array\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Array, otherwise false\r\n */\r\nfunction isArray(val) {\r\n    return toString.call(val) === '[object Array]';\r\n}\r\n\r\n/**\r\n * Determine if a value is an ArrayBuffer\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\r\n */\r\nfunction isArrayBuffer(val) {\r\n    return toString.call(val) === '[object ArrayBuffer]';\r\n}\r\n\r\n/**\r\n * Determine if a value is a FormData\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an FormData, otherwise false\r\n */\r\nfunction isFormData(val) {\r\n    return (typeof FormData !== 'undefined') && (val instanceof FormData);\r\n}\r\n\r\n/**\r\n * Determine if a value is a view on an ArrayBuffer\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\r\n */\r\nfunction isArrayBufferView(val) {\r\n    var result;\r\n    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\r\n        result = ArrayBuffer.isView(val);\r\n    } else {\r\n        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Determine if a value is a String\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a String, otherwise false\r\n */\r\nfunction isString(val) {\r\n    return typeof val === 'string';\r\n}\r\n\r\n/**\r\n * Determine if a value is a Number\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Number, otherwise false\r\n */\r\nfunction isNumber(val) {\r\n    return typeof val === 'number';\r\n}\r\n\r\n/**\r\n * Determine if a value is undefined\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if the value is undefined, otherwise false\r\n */\r\nfunction isUndefined(val) {\r\n    return typeof val === 'undefined';\r\n}\r\n\r\n/**\r\n * Determine if a value is an Object\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is an Object, otherwise false\r\n */\r\nfunction isObject(val) {\r\n    return val !== null && typeof val === 'object';\r\n}\r\n\r\n/**\r\n * Determine if a value is a Date\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Date, otherwise false\r\n */\r\nfunction isDate(val) {\r\n    return toString.call(val) === '[object Date]';\r\n}\r\n\r\n/**\r\n * Determine if a value is a File\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a File, otherwise false\r\n */\r\nfunction isFile(val) {\r\n    return toString.call(val) === '[object File]';\r\n}\r\n\r\n/**\r\n * Determine if a value is a Blob\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Blob, otherwise false\r\n */\r\nfunction isBlob(val) {\r\n    return toString.call(val) === '[object Blob]';\r\n}\r\n\r\n/**\r\n * Determine if a value is a Function\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Function, otherwise false\r\n */\r\nfunction isFunction(val) {\r\n    return toString.call(val) === '[object Function]';\r\n}\r\n\r\n/**\r\n * Determine if a value is a Stream\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a Stream, otherwise false\r\n */\r\nfunction isStream(val) {\r\n    return isObject(val) && isFunction(val.pipe);\r\n}\r\n\r\n/**\r\n * Determine if a value is a URLSearchParams object\r\n *\r\n * @param {Object} val The value to test\r\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\r\n */\r\nfunction isURLSearchParams(val) {\r\n    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\r\n}\r\n\r\n/**\r\n * Trim excess whitespace off the beginning and end of a string\r\n *\r\n * @param {String} str The String to trim\r\n * @returns {String} The String freed of excess whitespace\r\n */\r\nfunction trim(str) {\r\n    return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\r\n}\r\n\r\n/**\r\n * Determine if we're running in a standard browser environment\r\n *\r\n * This allows DeepAI to run in a web worker, and react-native.\r\n * Both environments support XMLHttpRequest, but not fully standard globals.\r\n *\r\n * web workers:\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * react-native:\r\n *  navigator.product -> 'ReactNative'\r\n * nativescript\r\n *  navigator.product -> 'NativeScript' or 'NS'\r\n */\r\nfunction isStandardBrowserEnv() {\r\n    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\r\n        navigator.product === 'NativeScript' ||\r\n        navigator.product === 'NS')) {\r\n        return false;\r\n    }\r\n    return (\r\n        typeof window !== 'undefined' &&\r\n        typeof document !== 'undefined'\r\n    );\r\n}\r\n\r\n/**\r\n * Iterate over an Array or an Object invoking a function for each item.\r\n *\r\n * If `obj` is an Array callback will be called passing\r\n * the value, index, and complete array for each item.\r\n *\r\n * If 'obj' is an Object callback will be called passing\r\n * the value, key, and complete object for each property.\r\n *\r\n * @param {Object|Array} obj The object to iterate\r\n * @param {Function} fn The callback to invoke for each item\r\n */\r\nfunction forEach(obj, fn) {\r\n    // Don't bother if no value provided\r\n    if (obj === null || typeof obj === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    // Force an array if not already something iterable\r\n    if (typeof obj !== 'object') {\r\n        /*eslint no-param-reassign:0*/\r\n        obj = [obj];\r\n    }\r\n\r\n    if (isArray(obj)) {\r\n        // Iterate over array values\r\n        for (var i = 0, l = obj.length; i < l; i++) {\r\n            fn.call(null, obj[i], i, obj);\r\n        }\r\n    } else {\r\n        // Iterate over object keys\r\n        for (var key in obj) {\r\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n                fn.call(null, obj[key], key, obj);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Accepts varargs expecting each argument to be an object, then\r\n * immutably merges the properties of each object and returns result.\r\n *\r\n * When multiple objects contain the same key the later object in\r\n * the arguments list will take precedence.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * var result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // outputs 456\r\n * ```\r\n *\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n */\r\nfunction merge(/* obj1, obj2, obj3, ... */) {\r\n    var result = {};\r\n    function assignValue(val, key) {\r\n        if (typeof result[key] === 'object' && typeof val === 'object') {\r\n            result[key] = merge(result[key], val);\r\n        } else {\r\n            result[key] = val;\r\n        }\r\n    }\r\n\r\n    for (var i = 0, l = arguments.length; i < l; i++) {\r\n        forEach(arguments[i], assignValue);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Function equal to merge with the difference being that no reference\r\n * to original objects is kept.\r\n *\r\n * @see merge\r\n * @param {Object} obj1 Object to merge\r\n * @returns {Object} Result of all merge properties\r\n */\r\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\r\n    var result = {};\r\n    function assignValue(val, key) {\r\n        if (typeof result[key] === 'object' && typeof val === 'object') {\r\n            result[key] = deepMerge(result[key], val);\r\n        } else if (typeof val === 'object') {\r\n            result[key] = deepMerge({}, val);\r\n        } else {\r\n            result[key] = val;\r\n        }\r\n    }\r\n\r\n    for (var i = 0, l = arguments.length; i < l; i++) {\r\n        forEach(arguments[i], assignValue);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Extends object a by mutably adding to it the properties of object b.\r\n *\r\n * @param {Object} a The object to be extended\r\n * @param {Object} b The object to copy properties from\r\n * @param {Object} thisArg The object to bind function to\r\n * @return {Object} The resulting value of object a\r\n */\r\nfunction extend(a, b, thisArg) {\r\n    forEach(b, function assignValue(val, key) {\r\n        if (thisArg && typeof val === 'function') {\r\n            a[key] = bind(val, thisArg);\r\n        } else {\r\n            a[key] = val;\r\n        }\r\n    });\r\n    return a;\r\n}\r\n\r\nmodule.exports = {\r\n    isArray: isArray,\r\n    isArrayBuffer: isArrayBuffer,\r\n    isFormData: isFormData,\r\n    isArrayBufferView: isArrayBufferView,\r\n    isString: isString,\r\n    isNumber: isNumber,\r\n    isObject: isObject,\r\n    isUndefined: isUndefined,\r\n    isDate: isDate,\r\n    isFile: isFile,\r\n    isBlob: isBlob,\r\n    isFunction: isFunction,\r\n    isStream: isStream,\r\n    isURLSearchParams: isURLSearchParams,\r\n    isStandardBrowserEnv: isStandardBrowserEnv,\r\n    forEach: forEach,\r\n    merge: merge,\r\n    deepMerge: deepMerge,\r\n    extend: extend,\r\n    trim: trim\r\n};\r\n"]},"metadata":{},"sourceType":"script"}