{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Gets a list of IDs of users currently present in the catalog.\n */\n\n\nvar ListUsers = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(ListUsers, _rqs$Request);\n\n  var _super = _createSuper(ListUsers);\n\n  /**\n   * Construct the request\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *filter*\n   *         - Type: string\n   *         - Description: Boolean-returning [ReQL](https://docs.recombee.com/reql.html) expression, which allows you to filter users to be listed. Only the users for which the expression is *true* will be returned.\n   *     - *count*\n   *         - Type: number\n   *         - Description: The number of users to be listed.\n   *     - *offset*\n   *         - Type: number\n   *         - Description: Specifies the number of users to skip (ordered by `userId`).\n   *     - *returnProperties*\n   *         - Type: boolean\n   *         - Description: With `returnProperties=true`, property values of the listed users are returned along with their IDs in a JSON dictionary. \n   * Example response:\n   * ```\n   *   [\n   *     {\n   *       \"userId\": \"user-81\",\n   *       \"country\": \"US\",\n   *       \"sex\": \"M\"\n   *     },\n   *     {\n   *       \"userId\": \"user-314\",\n   *       \"country\": \"CAN\",\n   *       \"sex\": \"F\"\n   *     }\n   *   ]\n   * ```\n   *     - *includedProperties*\n   *         - Type: string[]\n   *         - Description: Allows to specify, which properties should be returned when `returnProperties=true` is set. The properties are given as a comma-separated list. \n   * Example response for `includedProperties=country`:\n   * ```\n   *   [\n   *     {\n   *       \"userId\": \"user-81\",\n   *       \"country\": \"US\"\n   *     },\n   *     {\n   *       \"userId\": \"user-314\",\n   *       \"country\": \"CAN\"\n   *     }\n   *   ]\n   * ```\n   */\n  function ListUsers(optional) {\n    var _this;\n\n    _classCallCheck(this, ListUsers);\n\n    _this = _super.call(this, 'GET', '/users/list/', 100000, false);\n    optional = optional || {};\n    _this.filter = optional.filter;\n    _this.count = optional.count;\n    _this.offset = optional.offset;\n    _this.returnProperties = optional.returnProperties;\n    _this.includedProperties = optional.includedProperties;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(ListUsers, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      if (this.filter !== undefined) params.filter = this.filter;\n      if (this.count !== undefined) params.count = this.count;\n      if (this.offset !== undefined) params.offset = this.offset;\n      if (this.returnProperties !== undefined) params.returnProperties = this.returnProperties;\n      if (this.includedProperties !== undefined) params.includedProperties = this.includedProperties;\n      return params;\n    }\n  }]);\n\n  return ListUsers;\n}(rqs.Request);\n\nexports.ListUsers = ListUsers;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/list-users.js"],"names":["rqs","require","ListUsers","optional","filter","count","offset","returnProperties","includedProperties","params","undefined","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;IAGMC,S;;;;;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,qBAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AACpB,8BAAM,KAAN,EAAa,cAAb,EAA6B,MAA7B,EAAqC,KAArC;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,UAAKC,MAAL,GAAcD,QAAQ,CAACC,MAAvB;AACA,UAAKC,KAAL,GAAaF,QAAQ,CAACE,KAAtB;AACA,UAAKC,MAAL,GAAcH,QAAQ,CAACG,MAAvB;AACA,UAAKC,gBAAL,GAAwBJ,QAAQ,CAACI,gBAAjC;AACA,UAAKC,kBAAL,GAA0BL,QAAQ,CAACK,kBAAnC;AAPoB;AAQrB;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AAEA,aAAOA,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACA,UAAI,KAAKL,MAAL,KAAgBM,SAApB,EACED,MAAM,CAACL,MAAP,GAAgB,KAAKA,MAArB;AACF,UAAI,KAAKC,KAAL,KAAeK,SAAnB,EACED,MAAM,CAACJ,KAAP,GAAe,KAAKA,KAApB;AACF,UAAI,KAAKC,MAAL,KAAgBI,SAApB,EACED,MAAM,CAACH,MAAP,GAAgB,KAAKA,MAArB;AACF,UAAI,KAAKC,gBAAL,KAA0BG,SAA9B,EACED,MAAM,CAACF,gBAAP,GAA0B,KAAKA,gBAA/B;AACF,UAAI,KAAKC,kBAAL,KAA4BE,SAAhC,EACED,MAAM,CAACD,kBAAP,GAA4B,KAAKA,kBAAjC;AACF,aAAOC,MAAP;AACD;;;;EAvFqBT,GAAG,CAACW,O;;AA0F5BC,OAAO,CAACV,SAAR,GAAoBA,SAApB","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Gets a list of IDs of users currently present in the catalog.\n */\nclass ListUsers extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *filter*\n   *         - Type: string\n   *         - Description: Boolean-returning [ReQL](https://docs.recombee.com/reql.html) expression, which allows you to filter users to be listed. Only the users for which the expression is *true* will be returned.\n   *     - *count*\n   *         - Type: number\n   *         - Description: The number of users to be listed.\n   *     - *offset*\n   *         - Type: number\n   *         - Description: Specifies the number of users to skip (ordered by `userId`).\n   *     - *returnProperties*\n   *         - Type: boolean\n   *         - Description: With `returnProperties=true`, property values of the listed users are returned along with their IDs in a JSON dictionary. \n   * Example response:\n   * ```\n   *   [\n   *     {\n   *       \"userId\": \"user-81\",\n   *       \"country\": \"US\",\n   *       \"sex\": \"M\"\n   *     },\n   *     {\n   *       \"userId\": \"user-314\",\n   *       \"country\": \"CAN\",\n   *       \"sex\": \"F\"\n   *     }\n   *   ]\n   * ```\n   *     - *includedProperties*\n   *         - Type: string[]\n   *         - Description: Allows to specify, which properties should be returned when `returnProperties=true` is set. The properties are given as a comma-separated list. \n   * Example response for `includedProperties=country`:\n   * ```\n   *   [\n   *     {\n   *       \"userId\": \"user-81\",\n   *       \"country\": \"US\"\n   *     },\n   *     {\n   *       \"userId\": \"user-314\",\n   *       \"country\": \"CAN\"\n   *     }\n   *   ]\n   * ```\n   */\n  constructor(optional) {\n    super('GET', '/users/list/', 100000, false);\n    optional = optional || {};\n    this.filter = optional.filter;\n    this.count = optional.count;\n    this.offset = optional.offset;\n    this.returnProperties = optional.returnProperties;\n    this.includedProperties = optional.includedProperties;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    if (this.filter !== undefined)\n      params.filter = this.filter;\n    if (this.count !== undefined)\n      params.count = this.count;\n    if (this.offset !== undefined)\n      params.offset = this.offset;\n    if (this.returnProperties !== undefined)\n      params.returnProperties = this.returnProperties;\n    if (this.includedProperties !== undefined)\n      params.includedProperties = this.includedProperties;\n    return params;\n  }\n}\n\nexports.ListUsers = ListUsers\n"]},"metadata":{},"sourceType":"script"}