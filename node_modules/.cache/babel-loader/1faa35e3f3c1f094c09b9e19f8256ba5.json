{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Adds a cart addition of a given item made by a given user.\n */\n\n\nvar AddCartAddition = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(AddCartAddition, _rqs$Request);\n\n  var _super = _createSuper(AddCartAddition);\n\n  /**\n   * Construct the request\n   * @param {string} userId - User who added the item to the cart\n   * @param {string} itemId - Item added to the cart\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *timestamp*\n   *         - Type: string|number\n   *         - Description: UTC timestamp of the cart addition as ISO8601-1 pattern or UTC epoch time. The default value is the current time.\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: Sets whether the given user/item should be created if not present in the database.\n   *     - *amount*\n   *         - Type: number\n   *         - Description: Amount (number) added to cart. The default is 1. For example if `user-x` adds two `item-y` during a single order (session...), the `amount` should equal to 2.\n   *     - *price*\n   *         - Type: number\n   *         - Description: Price of the added item. If `amount` is greater than 1, sum of prices of all the items should be given.\n   *     - *recommId*\n   *         - Type: string\n   *         - Description: If this cart addition is based on a recommendation request, `recommId` is the id of the clicked recommendation.\n   *     - *additionalData*\n   *         - Type: \n   *         - Description: A dictionary of additional data for the interaction.\n   */\n  function AddCartAddition(userId, itemId, optional) {\n    var _this;\n\n    _classCallCheck(this, AddCartAddition);\n\n    _this = _super.call(this, 'POST', '/cartadditions/', 1000, false);\n    _this.userId = userId;\n    _this.itemId = itemId;\n    optional = optional || {};\n    _this.timestamp = optional.timestamp;\n    _this.cascadeCreate = optional.cascadeCreate;\n    _this.amount = optional.amount;\n    _this.price = optional.price;\n    _this.recommId = optional.recommId;\n    _this.additionalData = optional.additionalData;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(AddCartAddition, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      params.userId = this.userId;\n      params.itemId = this.itemId;\n      if (this.timestamp !== undefined) params.timestamp = this.timestamp;\n      if (this.cascadeCreate !== undefined) params.cascadeCreate = this.cascadeCreate;\n      if (this.amount !== undefined) params.amount = this.amount;\n      if (this.price !== undefined) params.price = this.price;\n      if (this.recommId !== undefined) params.recommId = this.recommId;\n      if (this.additionalData !== undefined) params.additionalData = this.additionalData;\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      return params;\n    }\n  }]);\n\n  return AddCartAddition;\n}(rqs.Request);\n\nexports.AddCartAddition = AddCartAddition;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/add-cart-addition.js"],"names":["rqs","require","AddCartAddition","userId","itemId","optional","timestamp","cascadeCreate","amount","price","recommId","additionalData","params","undefined","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;IAGMC,e;;;;;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,2BAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AAAA;;AAAA;;AACpC,8BAAM,MAAN,EAAc,iBAAd,EAAiC,IAAjC,EAAuC,KAAvC;AACA,UAAKF,MAAL,GAAcA,MAAd;AACA,UAAKC,MAAL,GAAcA,MAAd;AACAC,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,UAAKC,SAAL,GAAiBD,QAAQ,CAACC,SAA1B;AACA,UAAKC,aAAL,GAAqBF,QAAQ,CAACE,aAA9B;AACA,UAAKC,MAAL,GAAcH,QAAQ,CAACG,MAAvB;AACA,UAAKC,KAAL,GAAaJ,QAAQ,CAACI,KAAtB;AACA,UAAKC,QAAL,GAAgBL,QAAQ,CAACK,QAAzB;AACA,UAAKC,cAAL,GAAsBN,QAAQ,CAACM,cAA/B;AAVoC;AAWrC;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACT,MAAP,GAAgB,KAAKA,MAArB;AACAS,MAAAA,MAAM,CAACR,MAAP,GAAgB,KAAKA,MAArB;AAEA,UAAG,KAAKE,SAAL,KAAmBO,SAAtB,EACED,MAAM,CAACN,SAAP,GAAmB,KAAKA,SAAxB;AAEF,UAAG,KAAKC,aAAL,KAAuBM,SAA1B,EACED,MAAM,CAACL,aAAP,GAAuB,KAAKA,aAA5B;AAEF,UAAG,KAAKC,MAAL,KAAgBK,SAAnB,EACED,MAAM,CAACJ,MAAP,GAAgB,KAAKA,MAArB;AAEF,UAAG,KAAKC,KAAL,KAAeI,SAAlB,EACED,MAAM,CAACH,KAAP,GAAe,KAAKA,KAApB;AAEF,UAAG,KAAKC,QAAL,KAAkBG,SAArB,EACED,MAAM,CAACF,QAAP,GAAkB,KAAKA,QAAvB;AAEF,UAAG,KAAKC,cAAL,KAAwBE,SAA3B,EACED,MAAM,CAACD,cAAP,GAAwB,KAAKA,cAA7B;AAEF,aAAOC,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACA,aAAOA,MAAP;AACD;;;;EA7E2BZ,GAAG,CAACc,O;;AAgFlCC,OAAO,CAACb,eAAR,GAA0BA,eAA1B","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Adds a cart addition of a given item made by a given user.\n */\nclass AddCartAddition extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} userId - User who added the item to the cart\n   * @param {string} itemId - Item added to the cart\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *timestamp*\n   *         - Type: string|number\n   *         - Description: UTC timestamp of the cart addition as ISO8601-1 pattern or UTC epoch time. The default value is the current time.\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: Sets whether the given user/item should be created if not present in the database.\n   *     - *amount*\n   *         - Type: number\n   *         - Description: Amount (number) added to cart. The default is 1. For example if `user-x` adds two `item-y` during a single order (session...), the `amount` should equal to 2.\n   *     - *price*\n   *         - Type: number\n   *         - Description: Price of the added item. If `amount` is greater than 1, sum of prices of all the items should be given.\n   *     - *recommId*\n   *         - Type: string\n   *         - Description: If this cart addition is based on a recommendation request, `recommId` is the id of the clicked recommendation.\n   *     - *additionalData*\n   *         - Type: \n   *         - Description: A dictionary of additional data for the interaction.\n   */\n  constructor(userId, itemId, optional) {\n    super('POST', '/cartadditions/', 1000, false);\n    this.userId = userId;\n    this.itemId = itemId;\n    optional = optional || {};\n    this.timestamp = optional.timestamp;\n    this.cascadeCreate = optional.cascadeCreate;\n    this.amount = optional.amount;\n    this.price = optional.price;\n    this.recommId = optional.recommId;\n    this.additionalData = optional.additionalData;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n    params.userId = this.userId;\n    params.itemId = this.itemId;\n\n    if(this.timestamp !== undefined)\n      params.timestamp = this.timestamp;\n\n    if(this.cascadeCreate !== undefined)\n      params.cascadeCreate = this.cascadeCreate;\n\n    if(this.amount !== undefined)\n      params.amount = this.amount;\n\n    if(this.price !== undefined)\n      params.price = this.price;\n\n    if(this.recommId !== undefined)\n      params.recommId = this.recommId;\n\n    if(this.additionalData !== undefined)\n      params.additionalData = this.additionalData;\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    return params;\n  }\n}\n\nexports.AddCartAddition = AddCartAddition\n"]},"metadata":{},"sourceType":"script"}