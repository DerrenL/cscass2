{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Deletes an item of given `itemId` from the catalog.\n * If there are any *purchases*, *ratings*, *bookmarks*, *cart additions* or *detail views* of the item present in the database, they will be deleted in cascade as well. Also, if the item is present in some *series*, it will be removed from all the *series* where present.\n * If an item becomes obsolete/no longer available, it is often meaningful to keep it in the catalog (along with all the interaction data, which are very useful), and only exclude the item from recommendations. In such a case, use [ReQL filter](https://docs.recombee.com/reql.html) instead of deleting the item completely.\n */\n\n\nvar DeleteItem = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(DeleteItem, _rqs$Request);\n\n  var _super = _createSuper(DeleteItem);\n\n  /**\n   * Construct the request\n   * @param {string} itemId - ID of the item to be deleted.\n   */\n  function DeleteItem(itemId) {\n    var _this;\n\n    _classCallCheck(this, DeleteItem);\n\n    _this = _super.call(this, 'DELETE', \"/items/\".concat(itemId), 1000, false);\n    _this.itemId = itemId;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(DeleteItem, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      return params;\n    }\n  }]);\n\n  return DeleteItem;\n}(rqs.Request);\n\nexports.DeleteItem = DeleteItem;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/delete-item.js"],"names":["rqs","require","DeleteItem","itemId","params","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;;;IAKMC,U;;;;;AAEJ;;;;AAIA,sBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,8BAAM,QAAN,mBAA0BA,MAA1B,GAAoC,IAApC,EAA0C,KAA1C;AACA,UAAKA,MAAL,GAAcA,MAAd;AAFkB;AAGnB;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AAEA,aAAOA,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACA,aAAOA,MAAP;AACD;;;;EA5BsBJ,GAAG,CAACK,O;;AA+B7BC,OAAO,CAACJ,UAAR,GAAqBA,UAArB","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Deletes an item of given `itemId` from the catalog.\n * If there are any *purchases*, *ratings*, *bookmarks*, *cart additions* or *detail views* of the item present in the database, they will be deleted in cascade as well. Also, if the item is present in some *series*, it will be removed from all the *series* where present.\n * If an item becomes obsolete/no longer available, it is often meaningful to keep it in the catalog (along with all the interaction data, which are very useful), and only exclude the item from recommendations. In such a case, use [ReQL filter](https://docs.recombee.com/reql.html) instead of deleting the item completely.\n */\nclass DeleteItem extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} itemId - ID of the item to be deleted.\n   */\n  constructor(itemId) {\n    super('DELETE', `/items/${itemId}`, 1000, false);\n    this.itemId = itemId;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    return params;\n  }\n}\n\nexports.DeleteItem = DeleteItem\n"]},"metadata":{},"sourceType":"script"}