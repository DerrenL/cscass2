{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Recommend users that are likely to be interested in a given item.\n * It is also possible to use POST HTTP method (for example in case of very long ReQL filter) - query parameters then become body parameters.\n * The returned users are sorted by predicted interest in the item (first user being the most interested).\n */\n\n\nvar RecommendUsersToItem = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(RecommendUsersToItem, _rqs$Request);\n\n  var _super = _createSuper(RecommendUsersToItem);\n\n  /**\n   * Construct the request\n   * @param {string} itemId - ID of the item for which the recommendations are to be generated.\n   * @param {number} count - Number of items to be recommended (N for the top-N recommendation).\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *scenario*\n   *         - Type: string\n   *         - Description: Scenario defines a particular application of recommendations. It can be for example \"homepage\", \"cart\" or \"emailing\".\n   * You can set various settings to the [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com). You can also see performance of each scenario in the Admin UI separately, so you can check how well each application performs.\n   * The AI which optimizes models in order to get the best results may optimize different scenarios separately, or even use different models in each of the scenarios.\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: If item of given *itemId* doesn't exist in the database, it creates the missing item.\n   *     - *returnProperties*\n   *         - Type: boolean\n   *         - Description: With `returnProperties=true`, property values of the recommended users are returned along with their IDs in a JSON dictionary. The acquired property values can be used for easy displaying the recommended users. \n   * Example response:\n   * ```\n   *   {\n   *     \"recommId\": \"039b71dc-b9cc-4645-a84f-62b841eecfce\",\n   *     \"recomms\":\n   *       [\n   *         {\n   *           \"id\": \"user-17\",\n   *           \"values\": {\n   *             \"country\": \"US\",\n   *             \"sex\": \"F\"\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"user-2\",\n   *           \"values\": {\n   *             \"country\": \"CAN\",\n   *             \"sex\": \"M\"\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *includedProperties*\n   *         - Type: string[]\n   *         - Description: Allows to specify, which properties should be returned when `returnProperties=true` is set. The properties are given as a comma-separated list. \n   * Example response for `includedProperties=country`:\n   * ```\n   *   {\n   *     \"recommId\": \"b2b355dd-972a-4728-9c6b-2dc229db0678\",\n   *     \"recomms\":\n   *       [\n   *         {\n   *           \"id\": \"user-17\",\n   *           \"values\": {\n   *             \"country\": \"US\"\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"user-2\",\n   *           \"values\": {\n   *             \"country\": \"CAN\"\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *filter*\n   *         - Type: string\n   *         - Description: Boolean-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to filter recommended items based on the values of their attributes.\n   * Filters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *booster*\n   *         - Type: string\n   *         - Description: Number-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to boost recommendation rate of some items based on the values of their attributes.\n   * Boosters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *logic*\n   *         - Type: string|\n   *         - Description: Logic specifies particular behavior of the recommendation models. You can pick tailored logic for your domain and use case.\n   * See [this section](https://docs.recombee.com/recommendation_logics.html) for list of available logics and other details.\n   * The difference between `logic` and `scenario` is that `logic` specifies mainly behavior, while `scenario` specifies the place where recommendations are shown to the users.\n   * Logic can be also set to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *diversity*\n   *         - Type: number\n   *         - Description: **Expert option** Real number from [0.0, 1.0] which determines how much mutually dissimilar should the recommended items be. The default value is 0.0, i.e., no diversification. Value 1.0 means maximal diversification.\n   *     - *expertSettings*\n   *         - Type: \n   *         - Description: Dictionary of custom options.\n   *     - *returnAbGroup*\n   *         - Type: boolean\n   *         - Description: If there is a custom AB-testing running, return name of group to which the request belongs.\n   */\n  function RecommendUsersToItem(itemId, count, optional) {\n    var _this;\n\n    _classCallCheck(this, RecommendUsersToItem);\n\n    _this = _super.call(this, 'POST', \"/recomms/items/\".concat(itemId, \"/users/\"), 50000, false);\n    _this.itemId = itemId;\n    _this.count = count;\n    optional = optional || {};\n    _this.scenario = optional.scenario;\n    _this.cascadeCreate = optional.cascadeCreate;\n    _this.returnProperties = optional.returnProperties;\n    _this.includedProperties = optional.includedProperties;\n    _this.filter = optional.filter;\n    _this.booster = optional.booster;\n    _this.logic = optional.logic;\n    _this.diversity = optional.diversity;\n    _this.expertSettings = optional.expertSettings;\n    _this.returnAbGroup = optional.returnAbGroup;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(RecommendUsersToItem, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      params.count = this.count;\n      if (this.scenario !== undefined) params.scenario = this.scenario;\n      if (this.cascadeCreate !== undefined) params.cascadeCreate = this.cascadeCreate;\n      if (this.returnProperties !== undefined) params.returnProperties = this.returnProperties;\n      if (this.includedProperties !== undefined) params.includedProperties = this.includedProperties;\n      if (this.filter !== undefined) params.filter = this.filter;\n      if (this.booster !== undefined) params.booster = this.booster;\n      if (this.logic !== undefined) params.logic = this.logic;\n      if (this.diversity !== undefined) params.diversity = this.diversity;\n      if (this.expertSettings !== undefined) params.expertSettings = this.expertSettings;\n      if (this.returnAbGroup !== undefined) params.returnAbGroup = this.returnAbGroup;\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      return params;\n    }\n  }]);\n\n  return RecommendUsersToItem;\n}(rqs.Request);\n\nexports.RecommendUsersToItem = RecommendUsersToItem;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/recommend-users-to-item.js"],"names":["rqs","require","RecommendUsersToItem","itemId","count","optional","scenario","cascadeCreate","returnProperties","includedProperties","filter","booster","logic","diversity","expertSettings","returnAbGroup","params","undefined","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;;;IAKMC,oB;;;;;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA,gCAAYC,MAAZ,EAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AAAA;;AAAA;;AACnC,8BAAM,MAAN,2BAAgCF,MAAhC,cAAiD,KAAjD,EAAwD,KAAxD;AACA,UAAKA,MAAL,GAAcA,MAAd;AACA,UAAKC,KAAL,GAAaA,KAAb;AACAC,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,UAAKC,QAAL,GAAgBD,QAAQ,CAACC,QAAzB;AACA,UAAKC,aAAL,GAAqBF,QAAQ,CAACE,aAA9B;AACA,UAAKC,gBAAL,GAAwBH,QAAQ,CAACG,gBAAjC;AACA,UAAKC,kBAAL,GAA0BJ,QAAQ,CAACI,kBAAnC;AACA,UAAKC,MAAL,GAAcL,QAAQ,CAACK,MAAvB;AACA,UAAKC,OAAL,GAAeN,QAAQ,CAACM,OAAxB;AACA,UAAKC,KAAL,GAAaP,QAAQ,CAACO,KAAtB;AACA,UAAKC,SAAL,GAAiBR,QAAQ,CAACQ,SAA1B;AACA,UAAKC,cAAL,GAAsBT,QAAQ,CAACS,cAA/B;AACA,UAAKC,aAAL,GAAqBV,QAAQ,CAACU,aAA9B;AAdmC;AAepC;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACZ,KAAP,GAAe,KAAKA,KAApB;AAEA,UAAG,KAAKE,QAAL,KAAkBW,SAArB,EACED,MAAM,CAACV,QAAP,GAAkB,KAAKA,QAAvB;AAEF,UAAG,KAAKC,aAAL,KAAuBU,SAA1B,EACED,MAAM,CAACT,aAAP,GAAuB,KAAKA,aAA5B;AAEF,UAAG,KAAKC,gBAAL,KAA0BS,SAA7B,EACED,MAAM,CAACR,gBAAP,GAA0B,KAAKA,gBAA/B;AAEF,UAAG,KAAKC,kBAAL,KAA4BQ,SAA/B,EACED,MAAM,CAACP,kBAAP,GAA4B,KAAKA,kBAAjC;AAEF,UAAG,KAAKC,MAAL,KAAgBO,SAAnB,EACED,MAAM,CAACN,MAAP,GAAgB,KAAKA,MAArB;AAEF,UAAG,KAAKC,OAAL,KAAiBM,SAApB,EACED,MAAM,CAACL,OAAP,GAAiB,KAAKA,OAAtB;AAEF,UAAG,KAAKC,KAAL,KAAeK,SAAlB,EACED,MAAM,CAACJ,KAAP,GAAe,KAAKA,KAApB;AAEF,UAAG,KAAKC,SAAL,KAAmBI,SAAtB,EACED,MAAM,CAACH,SAAP,GAAmB,KAAKA,SAAxB;AAEF,UAAG,KAAKC,cAAL,KAAwBG,SAA3B,EACED,MAAM,CAACF,cAAP,GAAwB,KAAKA,cAA7B;AAEF,UAAG,KAAKC,aAAL,KAAuBE,SAA1B,EACED,MAAM,CAACD,aAAP,GAAuB,KAAKA,aAA5B;AAEF,aAAOC,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACA,aAAOA,MAAP;AACD;;;;EA3JgChB,GAAG,CAACkB,O;;AA8JvCC,OAAO,CAACjB,oBAAR,GAA+BA,oBAA/B","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Recommend users that are likely to be interested in a given item.\n * It is also possible to use POST HTTP method (for example in case of very long ReQL filter) - query parameters then become body parameters.\n * The returned users are sorted by predicted interest in the item (first user being the most interested).\n */\nclass RecommendUsersToItem extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} itemId - ID of the item for which the recommendations are to be generated.\n   * @param {number} count - Number of items to be recommended (N for the top-N recommendation).\n   * @param {Object} optional - Optional parameters given as an object with structure name of the parameter: value\n   * - Allowed parameters:\n   *     - *scenario*\n   *         - Type: string\n   *         - Description: Scenario defines a particular application of recommendations. It can be for example \"homepage\", \"cart\" or \"emailing\".\n   * You can set various settings to the [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com). You can also see performance of each scenario in the Admin UI separately, so you can check how well each application performs.\n   * The AI which optimizes models in order to get the best results may optimize different scenarios separately, or even use different models in each of the scenarios.\n   *     - *cascadeCreate*\n   *         - Type: boolean\n   *         - Description: If item of given *itemId* doesn't exist in the database, it creates the missing item.\n   *     - *returnProperties*\n   *         - Type: boolean\n   *         - Description: With `returnProperties=true`, property values of the recommended users are returned along with their IDs in a JSON dictionary. The acquired property values can be used for easy displaying the recommended users. \n   * Example response:\n   * ```\n   *   {\n   *     \"recommId\": \"039b71dc-b9cc-4645-a84f-62b841eecfce\",\n   *     \"recomms\":\n   *       [\n   *         {\n   *           \"id\": \"user-17\",\n   *           \"values\": {\n   *             \"country\": \"US\",\n   *             \"sex\": \"F\"\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"user-2\",\n   *           \"values\": {\n   *             \"country\": \"CAN\",\n   *             \"sex\": \"M\"\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *includedProperties*\n   *         - Type: string[]\n   *         - Description: Allows to specify, which properties should be returned when `returnProperties=true` is set. The properties are given as a comma-separated list. \n   * Example response for `includedProperties=country`:\n   * ```\n   *   {\n   *     \"recommId\": \"b2b355dd-972a-4728-9c6b-2dc229db0678\",\n   *     \"recomms\":\n   *       [\n   *         {\n   *           \"id\": \"user-17\",\n   *           \"values\": {\n   *             \"country\": \"US\"\n   *           }\n   *         },\n   *         {\n   *           \"id\": \"user-2\",\n   *           \"values\": {\n   *             \"country\": \"CAN\"\n   *           }\n   *         }\n   *       ]\n   *   }\n   * ```\n   *     - *filter*\n   *         - Type: string\n   *         - Description: Boolean-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to filter recommended items based on the values of their attributes.\n   * Filters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *booster*\n   *         - Type: string\n   *         - Description: Number-returning [ReQL](https://docs.recombee.com/reql.html) expression which allows you to boost recommendation rate of some items based on the values of their attributes.\n   * Boosters can be also assigned to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *logic*\n   *         - Type: string|\n   *         - Description: Logic specifies particular behavior of the recommendation models. You can pick tailored logic for your domain and use case.\n   * See [this section](https://docs.recombee.com/recommendation_logics.html) for list of available logics and other details.\n   * The difference between `logic` and `scenario` is that `logic` specifies mainly behavior, while `scenario` specifies the place where recommendations are shown to the users.\n   * Logic can be also set to a [scenario](https://docs.recombee.com/scenarios.html) in the [Admin UI](https://admin.recombee.com).\n   *     - *diversity*\n   *         - Type: number\n   *         - Description: **Expert option** Real number from [0.0, 1.0] which determines how much mutually dissimilar should the recommended items be. The default value is 0.0, i.e., no diversification. Value 1.0 means maximal diversification.\n   *     - *expertSettings*\n   *         - Type: \n   *         - Description: Dictionary of custom options.\n   *     - *returnAbGroup*\n   *         - Type: boolean\n   *         - Description: If there is a custom AB-testing running, return name of group to which the request belongs.\n   */\n  constructor(itemId, count, optional) {\n    super('POST', `/recomms/items/${itemId}/users/`, 50000, false);\n    this.itemId = itemId;\n    this.count = count;\n    optional = optional || {};\n    this.scenario = optional.scenario;\n    this.cascadeCreate = optional.cascadeCreate;\n    this.returnProperties = optional.returnProperties;\n    this.includedProperties = optional.includedProperties;\n    this.filter = optional.filter;\n    this.booster = optional.booster;\n    this.logic = optional.logic;\n    this.diversity = optional.diversity;\n    this.expertSettings = optional.expertSettings;\n    this.returnAbGroup = optional.returnAbGroup;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n    params.count = this.count;\n\n    if(this.scenario !== undefined)\n      params.scenario = this.scenario;\n\n    if(this.cascadeCreate !== undefined)\n      params.cascadeCreate = this.cascadeCreate;\n\n    if(this.returnProperties !== undefined)\n      params.returnProperties = this.returnProperties;\n\n    if(this.includedProperties !== undefined)\n      params.includedProperties = this.includedProperties;\n\n    if(this.filter !== undefined)\n      params.filter = this.filter;\n\n    if(this.booster !== undefined)\n      params.booster = this.booster;\n\n    if(this.logic !== undefined)\n      params.logic = this.logic;\n\n    if(this.diversity !== undefined)\n      params.diversity = this.diversity;\n\n    if(this.expertSettings !== undefined)\n      params.expertSettings = this.expertSettings;\n\n    if(this.returnAbGroup !== undefined)\n      params.returnAbGroup = this.returnAbGroup;\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    return params;\n  }\n}\n\nexports.RecommendUsersToItem = RecommendUsersToItem\n"]},"metadata":{},"sourceType":"script"}