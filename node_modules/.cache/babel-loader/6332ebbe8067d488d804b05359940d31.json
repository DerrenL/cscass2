{"ast":null,"code":"/*\n This file is auto-generated, do not edit\n*/\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\material-kit-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar rqs = require(\"./request\");\n/**\n * Adding an item property is somehow equivalent to adding a column to the table of items. The items may be characterized by various properties of different types.\n */\n\n\nvar AddItemProperty = /*#__PURE__*/function (_rqs$Request) {\n  _inherits(AddItemProperty, _rqs$Request);\n\n  var _super = _createSuper(AddItemProperty);\n\n  /**\n   * Construct the request\n   * @param {string} propertyName - Name of the item property to be created. Currently, the following names are reserved:`id`, `itemid`, case insensitively. Also, the length of the property name must not exceed 63 characters.\n   * @param {string} type - Value type of the item property to be created. One of: `int`, `double`, `string`, `boolean`, `timestamp`, `set`, `image` or `imageList`.\n   * * `int`- Signed integer number.\n   * * `double` - Floating point number. It uses 64-bit base-2 format (IEEE 754 standard).\n   * * `string` - UTF-8 string.\n   * * `boolean` - *true* / *false*\n   * * `timestamp` - Value representing date and time.\n   * * `set` - Set of strings.\n   * * `image` - URL of an image (`jpeg`, `png` or `gif`).\n   * * `imageList` - List of URLs that refer to images. \n   */\n  function AddItemProperty(propertyName, type) {\n    var _this;\n\n    _classCallCheck(this, AddItemProperty);\n\n    _this = _super.call(this, 'PUT', \"/items/properties/\".concat(propertyName), 100000, false);\n    _this.propertyName = propertyName;\n    _this.type = type;\n    return _this;\n  }\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n\n\n  _createClass(AddItemProperty, [{\n    key: \"bodyParameters\",\n    value: function bodyParameters() {\n      var params = {};\n      return params;\n    }\n    /**\n     * Get query parameters\n     * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n     */\n\n  }, {\n    key: \"queryParameters\",\n    value: function queryParameters() {\n      var params = {};\n      params.type = this.type;\n      return params;\n    }\n  }]);\n\n  return AddItemProperty;\n}(rqs.Request);\n\nexports.AddItemProperty = AddItemProperty;","map":{"version":3,"sources":["D:/material-kit-react-master/node_modules/recombee-api-client/lib/requests/add-item-property.js"],"names":["rqs","require","AddItemProperty","propertyName","type","params","Request","exports"],"mappings":"AAAA;;;AAIA;;;;;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;;;;;IAGMC,e;;;;;AAEJ;;;;;;;;;;;;;AAaA,2BAAYC,YAAZ,EAA0BC,IAA1B,EAAgC;AAAA;;AAAA;;AAC9B,8BAAM,KAAN,8BAAkCD,YAAlC,GAAkD,MAAlD,EAA0D,KAA1D;AACA,UAAKA,YAAL,GAAoBA,YAApB;AACA,UAAKC,IAAL,GAAYA,IAAZ;AAH8B;AAI/B;AAED;;;;;;;;qCAIiB;AACf,UAAIC,MAAM,GAAG,EAAb;AAEA,aAAOA,MAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAIA,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACD,IAAP,GAAc,KAAKA,IAAnB;AACA,aAAOC,MAAP;AACD;;;;EAvC2BL,GAAG,CAACM,O;;AA0ClCC,OAAO,CAACL,eAAR,GAA0BA,eAA1B","sourcesContent":["/*\n This file is auto-generated, do not edit\n*/\n\n'use strict';\nconst rqs = require(\"./request\");\n\n/**\n * Adding an item property is somehow equivalent to adding a column to the table of items. The items may be characterized by various properties of different types.\n */\nclass AddItemProperty extends rqs.Request {\n\n  /**\n   * Construct the request\n   * @param {string} propertyName - Name of the item property to be created. Currently, the following names are reserved:`id`, `itemid`, case insensitively. Also, the length of the property name must not exceed 63 characters.\n   * @param {string} type - Value type of the item property to be created. One of: `int`, `double`, `string`, `boolean`, `timestamp`, `set`, `image` or `imageList`.\n   * * `int`- Signed integer number.\n   * * `double` - Floating point number. It uses 64-bit base-2 format (IEEE 754 standard).\n   * * `string` - UTF-8 string.\n   * * `boolean` - *true* / *false*\n   * * `timestamp` - Value representing date and time.\n   * * `set` - Set of strings.\n   * * `image` - URL of an image (`jpeg`, `png` or `gif`).\n   * * `imageList` - List of URLs that refer to images. \n   */\n  constructor(propertyName, type) {\n    super('PUT', `/items/properties/${propertyName}`, 100000, false);\n    this.propertyName = propertyName;\n    this.type = type;\n  }\n\n  /**\n   * Get body parameters\n   * @return {Object} The values of body parameters (name of parameter: value of the parameter)\n   */\n  bodyParameters() {\n    let params = {};\n\n    return params;\n  }\n\n  /**\n   * Get query parameters\n   * @return {Object} The values of query parameters (name of parameter: value of the parameter)\n   */\n  queryParameters() {\n    let params = {};\n    params.type = this.type;\n    return params;\n  }\n}\n\nexports.AddItemProperty = AddItemProperty\n"]},"metadata":{},"sourceType":"script"}